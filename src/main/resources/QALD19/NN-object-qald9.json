[ {
         "pattern": "action",
        "predicates": ["Category:Action_role-playing_video_games"],
        "questions": {
            "32": "What are the top-10 action role-playing video games according to IGN? [object=Category:Action_role-playing_video_games]"
        },
        "Sparql": {
            "Sparql_32": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10"
        }
    }, 
    {
         "pattern": "action",
        "predicates": ["Last_Action_Hero"],
        "questions": {
            "412": "Give me all actors starring in Last Action Hero. [subject=Last_Action_Hero]"
        },
        "Sparql": {
            "Sparql_412": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Last_Action_Hero starring ?uri }"
        }
    }, 

    {
         "pattern": "actor",
        "predicates": ["Actor"],
        "questions": {
            "82": "Which actors were born in Germany?",
            "86": "Give me all actors who were born in Berlin.",
            "69": "Give me all actors who were born in Paris after 1950.",
            "128": "Give me all actors called Baldwin.",
            "133": "Which actor was casted in the most movies? [predicate=starring]",
            "412": "Give me all actors starring in Last Action Hero."
        },
        "Sparql": {
            "Sparql_82": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "Sparql_86": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Berlin> }",
            "Sparql_69": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Paris> . ?uri <http://dbpedia.org/ontology/birthDate> ?date . FILTER ( ?date >= xsd:dateTime('1950-12-31T00:00:00Z')) }",
            "Sparql_128": "PREFIX foaf:<http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?uri WHERE { ?uri foaf:surname 'Baldwin'@en . { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Actor> . } UNION { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . } }",
            "Sparql_133": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?f <http://dbpedia.org/ontology/starring> ?uri . } ORDER BY DESC(COUNT(DISTINCT(?f))) OFFSET 0 LIMIT 1",
            "Sparql_412": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Last_Action_Hero starring ?uri }"
        }
    }, 
  {
         "pattern": "advertising",
        "predicates": ["Advertising"],
        "questions": {
            "97": "Give me all companies in the advertising industry. [predicate=industry]"
        },
        "Sparql": {
            "Sparql_97": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }"
        }
    }, 
    {
         "pattern": "african",
        "predicates": ["West_African_CFA_franc"],
        "questions": {
            "147": "In which countries can you pay using the West African CFA franc?"
        },
        "Sparql": {
            "Sparql_147": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }"
        }
    }, {
         "pattern": "age",
        "predicates": ["Queens_of_the_Stone_Age"],
        "questions": {
            "410": "What was the first name of the band Queens of the Stone Age?"
        },
        "Sparql": {
            "Sparql_410": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?name WHERE { Queens_of_the_Stone_Age alias ?name }"
        }
    }, {
         "pattern": "air",
        "predicates": ["Air_China"],
        "questions": {
            "8": "Which airports does Air China serve?"
        },
        "Sparql": {
            "Sparql_8": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Air_China targetAirport ?uri }"
        }
    }, {
         "pattern": "airline",
        "predicates": ["Airline","Yeti_Airlines"],
        "questions": {
            "58": "How many airlines are there?",
            "116": "What airlines are part of the SkyTeam alliance?",
            "127": "How many airlines are members of the Star Alliance?",
            "196": "Which airports does Yeti Airlines serve?"
        },
        "Sparql": {
            "Sparql_58": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> }",
            "Sparql_116": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Airline> { ?uri <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/SkyTeam> } UNION { ?uri <http://dbpedia.org/ontology/Alliance> <http://dbpedia.org/resource/SkyTeam> } }",
            "Sparql_127": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> ; <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/Star_Alliance> }",
            "Sparql_196": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Yeti_Airlines targetAirport ?uri }"
        }
    }, {
         "pattern": "airport",
        "predicates": ["dbr:Düsseldorf_Airport"],
        "questions": {
            "216": "how much is the elevation of Düsseldorf Airport ?"
        },
        "Sparql": {
            "Sparql_216": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:Düsseldorf_Airport elevation ?ele } LIMIT 1"
        }
    }, {
         "pattern": "album",
        "predicates": ["Album"],
        "questions": {
             "88": "Which music albums contain the song Last Christmas?",
            "130": "For which label did Elvis record his first album?",
            "409": "What was the first Queen album?"
        },
        "Sparql": {
            "Sparql_88": "SELECT DISTINCT ?uri WHERE { ?single <http://dbpedia.org/ontology/album> ?uri ; <http://www.w3.org/2000/01/rdf-schema#label> \"Last Christmas\"@en }",
            "Sparql_130": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type Album ; artist Elvis_Presley ; releaseDate ?y ; recordLabel ?uri } ORDER BY ASC(?y) OFFSET 0 LIMIT 1",
            "Sparql_409": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Album ; artist <http://dbpedia.org/resource/Queen_(band)> ; releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1"
        }
    },  {
         "pattern": "aldi",
        "predicates": ["Aldi"],
        "questions": {
            "250": "How many Aldi stores are there?"
        },
        "Sparql": {
            "Sparql_250": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?number WHERE { Aldi numberOfLocations ?number }"
        }
    }, {
         "pattern": "alliance",
        "predicates": ["alliance"],
        "questions": {
            "127": "How many airlines are members of the Star Alliance?"
        },
        "Sparql": {
            "Sparql_127": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Airline> ; <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/Star_Alliance> }"
        }
    }, {
         "pattern": "almanac",
        "predicates": ["Farmers'_Almanac"],
        "questions": {
            "401": "Who writes the Farmers' Almanac?"
        },
        "Sparql": {
            "Sparql_401": "PREFIX dbp: <http://dbpedia.org/property/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Farmers'_Almanac> dbp:editor ?uri }"
        }
    }, {
         "pattern": "amazon",
        "predicates": ["Amazon_Eve"],
        "questions": {
            "392": "How tall is Amazon Eve?"
        },
        "Sparql": {
            "Sparql_392": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { Amazon_Eve height ?height }"
        }
    }, {
         "pattern": "america",
        "predicates": ["Captain_America","dbr:United_States"],
        "questions": {
            "19": "Who created the comic Captain America?",
            "189": "What is the largest city in america?"
        },
        "Sparql": {
            "Sparql_19": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Captain_America creator ?uri }",
            "Sparql_189": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?lcity WHERE { dbr:United_States largestCity ?lcity }"
        }
    },  {
         "pattern": "amphibian",
        "predicates": ["Amphibian"],
        "questions": {
            "214": "Are tree frogs a type of amphibian?"
        },
        "Sparql": {
            "Sparql_214": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Hylidae class Amphibian }"
        }
    }, {
         "pattern": "angel",
        "predicates": ["Hells_Angels"],
        "questions": {
            "92": "When were the Hells Angels founded?"
        },
        "Sparql": {
            "Sparql_92": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Hells_Angels> <http://dbpedia.org/property/founded> ?date }"
        }
    }, {
         "pattern": "ankara",
        "predicates": ["Ankara"],
        "questions": {
            "208": "Who is the coach of Ankara's ice hockey team?"
        },
        "Sparql": {
            "Sparql_208": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x city Ankara ; league Turkish_Ice_Hockey_First_League ; coach ?uri }"
        }
    }, {
         "pattern": "apollo",
        "predicates": ["Apollo_14"],
        "questions": {
            "20": "Give me the Apollo 14 astronauts.",
            "61": "Give me all Apollo 14 astronauts."
        },
        "Sparql": {
            "Sparql_20": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri mission Apollo_14 }",
            "Sparql_61": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/mission> <http://dbpedia.org/resource/Apollo_14> }"
        }
    }, {
         "pattern": "apple",
        "predicates": ["Apple_Inc"],
        "questions": {
            "93": "What is the net income of Apple?"
        },
        "Sparql": {
            "Sparql_93": "SELECT DISTINCT ?ni WHERE { <http://dbpedia.org/resource/Apple_Inc.> <http://dbpedia.org/ontology/netIncome> ?ni }"
        }
    }, {
         "pattern": "arabia",
        "predicates": ["T._E._Lawrence"],
        "questions": {
            "369": "In which military conflicts did Lawrence of Arabia participate?"
        },
        "Sparql": {
            "Sparql_369": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { T._E._Lawrence battle ?uri }"
        }
    }, {
         "pattern": "area",
        "predicates": ["Area_51"],
        "questions": {
            "4": "In which U.S. state is Area 51 located?"
        },
        "Sparql": {
            "Sparql_4": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { Area_51 location ?uri . ?uri country United_States. }"
        }
    },   {
         "pattern": "astronaut",
        "predicates": ["Astronaut","Apollo_14"],
        "questions": {
            "20": "Give me the Apollo 14 astronauts.",
            "61": "Give me all Apollo 14 astronauts.",
            "73": "Give me all ESA astronauts."
        },
        "Sparql": {
            "Sparql_20": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri mission Apollo_14 }",
            "Sparql_61": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/mission> <http://dbpedia.org/resource/Apollo_14> }",
            "Sparql_73": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/property/type> <http://dbpedia.org/resource/European_Space_Agency> }"
        }
    }, {
         "pattern": "atacama",
        "predicates": ["San_Pedro_de_Atacama"],
        "questions": {
            "370": "What is the timezone in San Pedro de Atacama?"
        },
        "Sparql": {
            "Sparql_370": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { San_Pedro_de_Atacama timeZone ?uri }"
        }
    }, {
         "pattern": "atlanta",
        "predicates": ["Atlanta_Falcons"],
        "questions": {
            "31": "Who is the tallest player of the Atlanta Falcons?"
        },
        "Sparql": {
            "Sparql_31": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "australia",
        "predicates": ["Australia"],
        "questions": {
            "181": "Show me all the breweries in Australia.",
            "256": "How many people live in the capital of Australia?",
            "301": "What is the largest city in Australia?",
            "400": "What is the highest mountain in Australia?"
        },
        "Sparql": {
            "Sparql_181": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Brewery> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
            "Sparql_256": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { Australia capital ?x . ?x populationTotal ?num }",
            "Sparql_301": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Australia largestCity ?uri }",
            "Sparql_400": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Mountain ; locatedInArea Australia ; elevation ?elevation } ORDER BY DESC(?elevation) LIMIT 1"
        }
    }, {
         "pattern": "autobiography",
        "predicates": ["Autobiography"],
        "questions": {
            "391": "Show me Hemingway's autobiography."
        },
        "Sparql": {
            "Sparql_391": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri author Ernest_Hemingway ; literaryGenre Autobiography }"
        }
    }, {
         "pattern": "aviv",
        "predicates": ["Tel_Aviv"],
        "questions": {
            "381": "Who is the mayor of Tel Aviv?"
        },
        "Sparql": {
            "Sparql_381": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Tel_Aviv leaderName ?uri }"
        }
    }, {
         "pattern": "baikal",
        "predicates": ["Lake_Baikal"],
        "questions": {
            "346": "Is Lake Baikal bigger than the Great Bear Lake?"
        },
        "Sparql": {
            "Sparql_346": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Lake_Baikal areaTotal ?a1 . Great_Bear_Lake areaTotal ?a2 FILTER ( ?a1 > ?a2 ) }"
        }
    }, {
         "pattern": "baikonur",
        "predicates": ["Baikonur_Cosmodrome "],
        "questions": {
            "23": "Which spaceflights were launched from Baikonur?",
            "167": "Which rockets were launched from Baikonur?"
        },
        "Sparql": {
            "Sparql_23": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> Baikonur_Cosmodrome }",
            "Sparql_167": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }"
        }
    }, {
         "pattern": "band",
        "predicates": ["Queens_of_the_Stone_Age"],
        "questions": {
            "410": "What was the first name of the band Queens of the Stone Age?"
        },
        "Sparql": {
            "Sparql_410": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?name WHERE { Queens_of_the_Stone_Age alias ?name }"
        }
    }, {
         "pattern": "bandleaders",
        "predicates": ["Bandleader"],
        "questions": {
            "24": "Give me a list of all trumpet players that were bandleaders.",
            "164": "Give me a list of all bandleaders that play trumpet."
        },
        "Sparql": {
            "Sparql_24": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri occupation Bandleader ; instrument Trumpet }",
            "Sparql_164": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }"
        }
    }, {
         "pattern": "band",
        "predicates": ["Band"],
        "questions": {
            "101": "Give me all Australian metalcore bands."
        },
        "Sparql": {
            "Sparql_101": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Band> ; <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Metalcore> { ?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/hometown> ?h . ?h <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }"
        }
    }, {
         "pattern": "basketball,",
        "predicates": ["BasketballPlayer"],
        "questions": {
            "34": "Show me all basketball players that are higher than 2 meters.",
            "53": "Who are the four youngest MVP basketball players?",
            "306": "Who is the tallest basketball player?"
        },
        "Sparql": {
            "Sparql_34": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "Sparql_53": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/birthDate> ?date ; <http://dbpedia.org/property/highlights> ?h FILTER regex(?h, \"MVP\") } ORDER BY DESC(?date) OFFSET 0 LIMIT 4",
            "Sparql_306": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type BasketballPlayer ; height ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "batman",
        "predicates": ["Batman_Begins","Batman"],
        "questions": {
            "131": "Is Christian Bale starring in Batman Begins?",
            "210": "Who created Batman?"
        },
        "Sparql": {
            "Sparql_131": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Batman_Begins starring Christian_Bale }",
            "Sparql_210": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Batman creator ?uri }"
        }
    }, {
         "pattern": "battle",
        "predicates": ["Battle Chess@en"],
        "questions": {
            "358": "Is there a video game called Battle Chess?"
        },
        "Sparql": {
            "Sparql_358": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?uri rdf:type VideoGame ; rdfs:label \"Battle Chess\"@en }"
        }
    }, {
         "pattern": "battlestar",
        "predicates": ["Battlestar_Galactica_%281978_TV_series%29"],
        "questions": {
            "160": "Does the new Battlestar Galactica series have more episodes than the old one?"
        },
        "Sparql": {
            "Sparql_160": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { <http://dbpedia.org/resource/Battlestar_Galactica_%281978_TV_series%29> numberOfEpisodes ?x . <http://dbpedia.org/resource/Battlestar_Galactica_%282004_TV_series%29> numberOfEpisodes ?y FILTER ( ?y > ?x ) }"
        }
    }, {
         "pattern": "bay",
        "predicates": ["Bay_of_Pigs_Invasion"],
        "questions": {
            "198": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?"
        },
        "Sparql": {
            "Sparql_198": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Cuban_Missile_Crisis date ?x . Bay_of_Pigs_Invasion date ?y FILTER ( ?x < ?y ) }"
        }
    }, {
         "pattern": "bbc",
        "predicates": ["BBC_Wildlife_Specials"],
        "questions": {
            "352": "Who is the host of the BBC Wildlife Specials?"
        },
        "Sparql": {
            "Sparql_352": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { BBC_Wildlife_Specials presenter ?uri }"
        }
    }, {
         "pattern": "beans",
        "predicates": ["Cocoa_bean"],
        "questions": {
            "257": "In which ancient empire could you pay with cocoa beans?"
        },
        "Sparql": {
            "Sparql_257": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri currency Cocoa_bean }"
        }
    }, {
         "pattern": "bear",
        "predicates": ["Great_Bear_Lake"],
        "questions": {
            "346": "Is Lake Baikal bigger than the Great Bear Lake?"
        },
        "Sparql": {
            "Sparql_346": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Lake_Baikal areaTotal ?a1 . Great_Bear_Lake areaTotal ?a2 FILTER ( ?a1 > ?a2 ) }"
        }
    }, {
         "pattern": "becker",
        "predicates": ["Boris_Becker"],
        "questions": {
            "388": "When did Boris Becker end his active career?"
        },
        "Sparql": {
            "Sparql_388": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?d WHERE { Boris_Becker activeYearsEndDate ?d }"
        }
    }, {
         "pattern": "beer",
        "predicates": ["Beer_in_Ireland"],
        "questions": {
            "80": "Which beer originated in Ireland?"
        },
        "Sparql": {
            "Sparql_80": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Beer> ; <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Beer_in_Ireland> }"
        }
    }, {
         "pattern": "beijing",
        "predicates": ["Beijing "],
        "questions": {
            "263": "Which electronics companies were founded in Beijing?"
        },
        "Sparql": {
            "Sparql_263": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Company ; industry Electronics ; foundationPlace Beijing }"
        }
    }, {
         "pattern": "belgium",
        "predicates": ["Belgium"],
        "questions": {
            "142": "Which telecommunications organizations are located in Belgium?"
        },
        "Sparql": {
            "Sparql_142": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Telecommunication> } UNION { ?uri <http://dbpedia.org/property/industry> ?industry FILTER regex(?industry, \"Telecommunications\") } { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Belgium> } UNION { ?uri <http://dbpedia.org/property/locationCountry> \"Belgium\"@en } }"
        }
    }, {
         "pattern": "berlin",
        "predicates": ["Berlin","Berlin_Tegel_Airport"],
        "questions": {
            "86": "Give me all actors who were born in Berlin.",
            "179": "Give me all people that were born in Vienna and died in Berlin.",
            "373": "Which subsidiary of Lufthansa serves both Dortmund and Berlin Tegel?"
        },
        "Sparql": {
            "Sparql_86": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Berlin> }",
            "Sparql_179": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }",
            "Sparql_373": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Lufthansa subsidiary ?uri . ?uri targetAirport Dortmund_Airport ; targetAirport Berlin_Tegel_Airport }"
        }
    }, {
         "pattern": "beverage",
        "predicates": ["Beverage"],
        "questions": {
            "193": "Is Cola a beverage?"
        },
        "Sparql": {
            "Sparql_193": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { Cola rdf:type Beverage }"
        }
    }, {
         "pattern": "boardgames",
        "predicates": ["GMT_Games"],
        "questions": {
            "1": "List all boardgames by GMT."
        },
        "Sparql": {
            "Sparql_1": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri publisher GMT_Games }"
        }
    }, {
         "pattern": "book",
        "predicates": ["The_Pillars_of_the_Earth", "Book", "The_Pillars_of_the_Earth", "Penguin_Books", "Penguin_Books"],
        "questions": {
            "21": "Who wrote the book The pillars of the Earth?",
            "109": "Give me all books written by Danielle Steel.",
            "121": "Which poet wrote the most books?",
            "123": "Which musician wrote the most books?",
            "195": "Who wrote the book Les Piliers de la terre?",
            "335": "Who wrote the book The Pillars of the Earth?",
            "347": "Show me all books in Asimov's Foundation series.",
            "371": "Give me all books by William Goldman with more than 300 pages.",
            "378": "Which books by Kerouac were published by Viking Press?",
            "383": "Show me the book that Muhammad Ali wrote.",
            "396": "Who is the founder of Penguin Books?"
        },
        "Sparql": {
            "Sparql_21": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { The_Pillars_of_the_Earth author ?uri }",
            "Sparql_123": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "Sparql_121": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Poet> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
            "Sparql_109": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Book> ; <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Danielle_Steel> }",
            "Sparql_195": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { The_Pillars_of_the_Earth author ?uri }",
            "Sparql_335": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { The_Pillars_of_the_Earth author ?uri }",
            "Sparql_347": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri series Foundation_series }",
            "Sparql_371": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Book ; author William_Goldman ; numberOfPages ?x FILTER ( ?x > 300 ) }",
            "Sparql_378": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Book ; publisher Viking_Press ; author Jack_Kerouac }",
            "Sparql_383": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Book ; author Muhammad_Ali }",
            "Sparql_396": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Penguin_Books founder ?uri }"
        }
    }, {
         "pattern": "borough",
        "predicates": ["Borough_(New_York_City"],
        "questions": {
            "393": "What are the five boroughs of New York?"
        },
        "Sparql": {
            "Sparql_393": "PREFIX  <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri governmentType <http://dbpedia.org/resource/Borough_(New_York_City)> }"
        }
    }, {
         "pattern": "bourgogne",
        "predicates": ["Melon_de_Bourgogne"],
        "questions": {
            "276": "From which region is the Melon de Bourgogne?"
        },
        "Sparql": {
            "Sparql_276": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Melon_de_Bourgogne wineRegion ?uri }"
        }
    }, {
         "pattern": "brazil",
        "predicates": ["Brazil_national_football_team"],
        "questions": {
            "105": "What was Brazil's lowest rank in the FIFA World Ranking?"
        },
        "Sparql": {
            "Sparql_105": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Brazil_national_football_team> <http://dbpedia.org/property/fifaMin> ?n }"
        }
    }, {
         "pattern": "brewery",
        "predicates": ["Brewery","Heineken"],
        "questions": {
            "181": "Show me all the breweries in Australia.",
            "273": "In what city is the Heineken brewery?"
        },
        "Sparql": {
            "Sparql_181": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Brewery> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
            "Sparql_273": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Heineken manufacturer ?x . ?x locationCity ?uri }"
        }
    }, {
         "pattern": "bridge",
        "predicates": ["Brooklyn_Bridge","Bridge"],
        "questions": {
            "48": "Which bridges cross the Seine?",
            "224": "Which river does the Brooklyn Bridge cross?",
            "350": "Who designed the Brooklyn Bridge?"
        },
        "Sparql": {
            "Sparql_48": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }",
            "Sparql_224": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Brooklyn_Bridge crosses ?uri }",
            "Sparql_350": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Brooklyn_Bridge architect ?uri }"
        }
    }, {
         "pattern": "brooklyn",
        "predicates": ["Brooklyn_Bridge"],
        "questions": {
            "224": "Which river does the Brooklyn Bridge cross?",
            "350": "Who designed the Brooklyn Bridge?"
        },
        "Sparql": {
            "Sparql_224": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Brooklyn_Bridge crosses ?uri }",
            "Sparql_350": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Brooklyn_Bridge architect ?uri }"
        }
    }, {
         "pattern": "brown",
        "predicates": ["dbr:Dan_Brown "],
        "questions": {
            "236": "What is the last work of Dan Brown?"
        },
        "Sparql": {
            "Sparql_236": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?book WHERE { { ?book author dbr:Dan_Brown . ?book dbp:releaseDate ?date } UNION { ?book author dbr:Dan_Brown . ?book publicationDate ?date} } ORDER BY DESC(xsd:date(?date)) LIMIT 1"
        }
    }, {
         "pattern": "building",
        "predicates": ["Building"],
        "questions": {
            "145": "Show me all English Gothic buildings in Kent.",
            "340": "Which building after the Burj Khalifa has the most floors?"
        },
        "Sparql": {
            "Sparql_340": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Burj_Khalifa floorCount ?burj . ?uri rdf:type Building ; floorCount ?proj FILTER ( ?proj < ?burj ) } ORDER BY DESC(?proj) LIMIT 1",
            "Sparql_145": "SELECT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Building> ; <http://dbpedia.org/ontology/architecturalStyle> <http://dbpedia.org/resource/English_Gothic_architecture> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Kent> }"
        }
    }, {
         "pattern": "bulls",
        "predicates": ["Chicago_Bulls"],
        "questions": {
            "186": "Who is the heaviest player of the Chicago Bulls?"
        },
        "Sparql": {
            "Sparql_186": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/ontology/weight> ?num { ?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } } ORDER BY DESC(?num) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "bundesliga",
        "predicates": ["Bundesliga"],
        "questions": {
            "46": "Show a list of soccer clubs that play in the Bundesliga."
        },
        "Sparql": {
            "Sparql_46": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }"
        }
    }, {
         "pattern": "burj",
        "predicates": ["Burj_Khalifa"],
        "questions": {
            "340": "Which building after the Burj Khalifa has the most floors?"
        },
        "Sparql": {
            "Sparql_340": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Burj_Khalifa floorCount ?burj . ?uri rdf:type Building ; floorCount ?proj FILTER ( ?proj < ?burj ) } ORDER BY DESC(?proj) LIMIT 1"
        }
    }, {
         "pattern": "butter",
        "predicates": ["Peanut_butter"],
        "questions": {
            "83": "How much carbs does peanut butter have?"
        },
        "Sparql": {
            "Sparql_83": "SELECT DISTINCT ?carbs WHERE { <http://dbpedia.org/resource/Peanut_butter> <http://dbpedia.org/property/carbs> ?carbs }"
        }
    }, {
         "pattern": "cairo",
        "predicates": ["dbr:Cairo"],
        "questions": {
            "234": "What is the population of Cairo?"
        },
        "Sparql": {
            "Sparql_234": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pop WHERE { dbr:Cairo populationTotal ?pop }"
        }
    }, {
         "pattern": "cake",
        "predicates": ["Carrot_cake"],
        "questions": {
            "199": "Which ingredients do I need for carrot cake?"
        },
        "Sparql": {
            "Sparql_199": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Carrot_cake ingredient ?uri }"
        }
    }, {
         "pattern": "california",
        "predicates": ["California","Hotel_California"],
        "questions": {
            "125": "Which software has been developed by organizations founded in California?",
            "379": "Who wrote the song Hotel California?"
        },
        "Sparql": {
            "Sparql_125": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Software> . ?company a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/developer> ?company . ?company <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/California> }",
            "Sparql_379": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Hotel_California writer ?uri }"
        }
    }, {
         "pattern": "cameroon",
        "predicates": ["Cameroon"],
        "questions": {
            "317": "What is the capital of Cameroon?"
        },
        "Sparql": {
            "Sparql_317": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Cameroon capital ?uri }"
        }
    }, {
         "pattern": "canada",
        "predicates": ["Canada"],
        "questions": {
            "284": "How many inhabitants does the largest city in Canada have?",
            "380": "What is the capital of Canada?"
        },
        "Sparql": {
            "Sparql_284": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { Canada largestCity ?city . ?city populationTotal ?num }",
            "Sparql_380": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Canada capital ?uri }"
        }
    }, {
         "pattern": "cannes",
        "predicates": ["Grand_Prix_(Cannes_Film_Festival)"],
        "questions": {
            "309": "Did Kaurismäki ever win the Grand Prix at Cannes?"
        },
        "Sparql": {
            "Sparql_309": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Aki_Kaurismäki award <http://dbpedia.org/resource/Grand_Prix_(Cannes_Film_Festival)> }"
        }
    }, {
         "pattern": "captain",
        "predicates": ["Captain_America"],
        "questions": {
            "19": "Who created the comic Captain America?"
        },
        "Sparql": {
            "Sparql_19": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Captain_America creator ?uri }"
        }
    }, {
         "pattern": "care",
        "predicates": ["UNC_Health_Care"],
        "questions": {
            "176": "What are the specialities of the UNC Health Care?"
        },
        "Sparql": {
            "Sparql_176": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/UNC_Health_Care> <http://dbpedia.org/property/speciality> ?uri }"
        }
    }, {
         "pattern": "carolina",
        "predicates": ["dbr:Carolina_Reaper"],
        "questions": {
            "242": "Where is the origin of Carolina reaper?"
        },
        "Sparql": {
            "Sparql_242": "PREFIX  <http://dbpedia.org/ontology/>PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:Carolina_Reaper origin ?uri}"
        }
    }, {
         "pattern": "carrot",
        "predicates": ["Carrot_cake"],
        "questions": {
            "199": "Which ingredients do I need for carrot cake?"
        },
        "Sparql": {
            "Sparql_199": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Carrot_cake ingredient ?uri }"
        }
    },  {
         "pattern": "cave",
        "predicates": ["Cave"],
        "questions": {
            "6": "Which countries have places with more than two caves?",
            "30": "Which caves have more than 3 entrances?",
            "135": "Which countries have more than ten caves?"
        },
        "Sparql": {
            "Sparql_6": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type Cave ; location ?uri . ?uri rdf:type Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
            "Sparql_30": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
            "Sparql_135": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> . ?cave a <http://dbpedia.org/ontology/Cave> { ?cave <http://dbpedia.org/ontology/location> ?uri } UNION { ?cave <http://dbpedia.org/ontology/location> ?loc . ?loc <http://dbpedia.org/ontology/country> ?uri } } GROUP BY ?uri HAVING ( COUNT(?cave) > 10 )"
        }
    }, {
         "pattern": "ceres",
        "predicates": ["Ceres_(dwarf_planet"],
        "questions": {
            "191": "Who discovered Ceres?"
        },
        "Sparql": {
            "Sparql_191": "PREFIX  <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ceres_(dwarf_planet)> discoverer ?uri }"
        }
    }, {
         "pattern": "cfa",
        "predicates": ["West_African_CFA_franc"],
        "questions": {
            "147": "In which countries can you pay using the West African CFA franc?"
        },
        "Sparql": {
            "Sparql_147": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }"
        }
    }, {
         "pattern": "chancellor",
        "predicates": ["Chancellor_of_Germany"],
        "questions": {
            "78": "Give me all federal chancellors of Germany."
        },
        "Sparql": {
            "Sparql_78": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/office> \"Chancellor of Germany\" } UNION { ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Chancellor_of_Germany> } }"
        }
    }, {
         "pattern": "charmed",
        "predicates": ["Charmed"],
        "questions": {
            "141": "Give me the birthdays of all actors of the television show Charmed."
        },
        "Sparql": {
            "Sparql_141": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Charmed> <http://dbpedia.org/ontology/starring> ?actor . ?actor <http://dbpedia.org/ontology/birthDate> ?date }"
        }
    }, {
         "pattern": "chemist",
        "predicates": ["Chemist"],
        "questions": {
            "107": "Was Margaret Thatcher a chemist?"
        },
        "Sparql": {
            "Sparql_107": "ASK WHERE { <http://dbpedia.org/resource/Margaret_Thatcher> <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Chemist> }"
        }
    }, {
         "pattern": "chess",
        "predicates": ["ChessPlayer","Battle Chess@en"],
        "questions": {
            "169": "Which Chess players died in the same place they were born in?",
            "358": "Is there a video game called Battle Chess?"
        },
        "Sparql": {
            "Sparql_169": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ChessPlayer> ; <http://dbpedia.org/ontology/birthPlace> ?x ; <http://dbpedia.org/ontology/deathPlace> ?y FILTER ( ?x = ?y ) }",
            "Sparql_358": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?uri rdf:type VideoGame ; rdfs:label \"Battle Chess\"@en }"
        }
    }, {
         "pattern": "chewbacca",
        "predicates": ["Chewbacca"],
        "questions": {
            "112": "Which actor played Chewbacca?"
        },
        "Sparql": {
            "Sparql_112": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chewbacca> <http://dbpedia.org/ontology/portrayer> ?uri }"
        }
    }, {
         "pattern": "chicago",
        "predicates": ["Chicago_Bulls"],
        "questions": {
            "186": "Who is the heaviest player of the Chicago Bulls?"
        },
        "Sparql": {
            "Sparql_186": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/ontology/weight> ?num { ?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } } ORDER BY DESC(?num) OFFSET 0 LIMIT 1"
        }
    },   {
         "pattern": "chile",
        "predicates": ["Chile_Route_68"],
        "questions": {
            "366": "In which city does the Chile Route 68 end?"
        },
        "Sparql": {
            "Sparql_366": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Chile_Route_68 routeEnd ?uri }"
        }
    }, {
         "pattern": "china",
        "predicates": ["Air_China","China"],
        "questions": {
            "8": "Which airports does Air China serve?",
            "402": "Give me the currency of China."
        },
        "Sparql": {
            "Sparql_8": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Air_China targetAirport ?uri }",
            "Sparql_402": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { China currency ?uri }"
        }
    }, {
         "pattern": "chip",
        "predicates": ["Chocolate_chip_cookie"],
        "questions": {
            "293": "What is in a chocolate chip cookie?"
        },
        "Sparql": {
            "Sparql_293": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Chocolate_chip_cookie ingredient ?uri }"
        }
    }, {
         "pattern": "chocolate",
        "predicates": ["Chocolate_chip_cookie"],
        "questions": {
            "293": "What is in a chocolate chip cookie?"
        },
        "Sparql": {
            "Sparql_293": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Chocolate_chip_cookie ingredient ?uri }"
        }
    }, {
         "pattern": "christmas",
        "predicates": ["Last Christmas@en"],
        "questions": {
            "88": "Which music albums contain the song Last Christmas?"
        },
        "Sparql": {
            "Sparql_88": "SELECT DISTINCT ?uri WHERE { ?single <http://dbpedia.org/ontology/album> ?uri ; <http://www.w3.org/2000/01/rdf-schema#label> \"Last Christmas\"@en }"
        }
    }, {
         "pattern": "city",
        "predicates": ["City", "New_York_City", "dbc:Cities_in_Germany", "largestCity", "dbr:Mexico_City", "Town"],
        "questions": {
            "5": "Who is the mayor of New York City?",
            "154": "What is the smallest city by area in Germany?",
            "166": "Is Egypts largest city also its capital?",
            "173": "Give me all cities in New Jersey with more than 100000 inhabitants.",
            "217": "How much is the population of mexico city ?",
            "246": "Which cities does the Weser flow through?",
            "279": "Which city has the most inhabitants?",
            "292": "In which city did Nikos Kazantzakis die?",
            "332": "Which city has the least inhabitants?",
            "349": "Which city has the oldest running metro?",
            "377": "In which city does Sylvester Stallone live?",
            "399": "In which city did John F. Kennedy die?",
            "404": "In which city are the headquarters of the United Nations?"

        },
        "Sparql": {
            "Sparql_5": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { New_York_City leaderName ?uri }",
            "Sparql_154": "PREFIX  <http://dbpedia.org/ontology/> PREFIX skos: <http://www.w3.org/2004/02/skos/core#> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT ?city WHERE { ?m skos:broader dbc:Cities_in_Germany . ?city dct:subject ?m ; areaTotal ?area } ORDER BY ?area LIMIT 1",
            "Sparql_166": "ASK WHERE { <http://dbpedia.org/resource/Egypt> <http://dbpedia.org/ontology/largestCity> ?large ; <http://dbpedia.org/ontology/capital> ?capital FILTER ( ?large = ?capital ) }",
            "Sparql_173": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type City ; isPartOf New_Jersey ; populationTotal ?inhabitants FILTER ( ?inhabitants > 100000 ) }",
            "Sparql_217": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Mexico_City WHERE { dbr:Mexico_City populationTotal ?Mexico_City }",
            "Sparql_246": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Weser city ?uri }",
            "Sparql_279": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type City ; populationTotal ?pop } ORDER BY DESC(?pop) OFFSET 0 LIMIT 1",
            "Sparql_292": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Nikos_Kazantzakis deathPlace ?uri . ?uri rdf:type Town }",
            "Sparql_332": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type City ; populationTotal ?pop } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1",
            "Sparql_349": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?loc WHERE { ?uri type dbr:Rapid_transit ; openingYear ?date ; location ?loc . ?loc rdf:type City } ORDER BY ASC(?date) LIMIT 1",
            "Sparql_377": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type City . Sylvester_Stallone residence ?uri }",
            "Sparql_399": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { John_F._Kennedy deathPlace ?uri . ?uri rdf:type City }",
            "Sparql_404": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Headquarters_of_the_United_Nations location ?uri . ?uri rdf:type City }"
        }
    }, {
         "pattern": "club",
        "predicates": ["SoccerClub"],
        "questions": {
            "46": "Show a list of soccer clubs that play in the Bundesliga.",
            "64": "Give me all soccer clubs in the Premier League.",
            "183": "Give me all soccer clubs in Spain."
        },
        "Sparql": {
            "Sparql_46": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "Sparql_64": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Premier_League> }",
            "Sparql_183": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> { ?uri <http://dbpedia.org/ontology/ground> <http://dbpedia.org/resource/Spain> } UNION { ?uri <http://dbpedia.org/property/ground> ?ground FILTER regex(?ground, \"Spain\") } }"
        }
    }, {
         "pattern": "cocoa",
        "predicates": ["Cocoa_bean"],
        "questions": {
            "257": "In which ancient empire could you pay with cocoa beans?"
        },
        "Sparql": {
            "Sparql_257": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri currency Cocoa_bean }"
        }
    }, {
         "pattern": "cola",
        "predicates": ["Cola"],
        "questions": {
            "193": "Is Cola a beverage?"
        },
        "Sparql": {
            "Sparql_193": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { Cola rdf:type Beverage }"
        }
    }, {
         "pattern": "colombia",
        "predicates": ["Colombia"],
        "questions": {
            "385": "How many languages are spoken in Colombia?"
        },
        "Sparql": {
            "Sparql_385": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri rdf:type Language . Colombia language ?uri }"
        }
    }, {
         "pattern": "colombo",
        "predicates": ["Colombo_Lighthouse"],
        "questions": {
            "298": "How high is the lighthouse in Colombo?"
        },
        "Sparql": {
            "Sparql_298": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { Colombo_Lighthouse height ?num }"
        }
    }, {
         "pattern": "columbia",
        "predicates": ["Columbia_University"],
        "questions": {
            "140": "How many politicians graduated from Columbia University?"
        },
        "Sparql": {
            "Sparql_140": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Politician> ; <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Columbia_University> }"
        }
    }, {
         "pattern": "company",
        "predicates": ["Company","Company","dbr:Ford_Motor_Company"],
        "questions": {
            "54": "Give me all companies in Munich.",
            "62": "Which companies have more than 1 million employees?",
            "97": "Give me all companies in the advertising industry.",
            "253": "Which companies produce hovercrafts?",
            "263": "Which electronics companies were founded in Beijing?",
            "269": "Which Indian company has the most employees?",
            "360": "Does the Ford Motor Company have a manufacturing plant in Malaysia?"
        },
        "Sparql": {
            "Sparql_54": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Munich> } }",
            "Sparql_62": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/numberOfEmployees> ?n } UNION { ?uri <http://dbpedia.org/property/numEmployees> ?n } FILTER ( ?n > 1000000 ) }",
            "Sparql_97": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }",
            "Sparql_253": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Company ; product Hovercraft }",
            "Sparql_263": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Company ; industry Electronics ; foundationPlace Beijing }",
            "Sparql_269": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Company ; location India ; numberOfEmployees ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "Sparql_360": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { ?uri assembly dbr:Malaysia ; manufacturer dbr:Ford_Motor_Company }" 
        }
    }, {
         "pattern": "cookie",
        "predicates": ["Chocolate_chip_cookie"],
        "questions": {
            "293": "What is in a chocolate chip cookie?"
        },
        "Sparql": {
            "Sparql_293": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Chocolate_chip_cookie ingredient ?uri }"
        }
    }, {
         "pattern": "cosmonaut",
        "predicates": ["Astronaut"],
        "questions": {
            "41": "Give me all cosmonauts."
        },
        "Sparql": {
            "Sparql_41": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }"
        }
    }, {
         "pattern": "country",
        "predicates": ["Country", "country"],
        "questions": {
            "6": "Which countries have places with more than two caves?",
            "110": "Which country has the most official languages?",
            "134": "Which countries have more than two official languages?",
            "135": "Which countries have more than ten caves?",
            "147": "In which countries can you pay using the West African CFA franc?",
            "354": "What country is Mount Everest in?",
            "406": "In which countries do people speak Japanese?"
        },
        "Sparql": {
            "Sparql_6": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type Cave ; location ?uri . ?uri rdf:type Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
            "Sparql_110": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country> . ?uri <http://dbpedia.org/property/officialLanguages> ?language . } ORDER BY DESC(COUNT(?language)) OFFSET 0 LIMIT 1",
            "Sparql_134": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> ; <http://dbpedia.org/ontology/officialLanguage> ?language } GROUP BY ?uri HAVING ( COUNT(?language) > 2 )",
            "Sparql_135": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> . ?cave a <http://dbpedia.org/ontology/Cave> { ?cave <http://dbpedia.org/ontology/location> ?uri } UNION { ?cave <http://dbpedia.org/ontology/location> ?loc . ?loc <http://dbpedia.org/ontology/country> ?uri } } GROUP BY ?uri HAVING ( COUNT(?cave) > 10 )",
            "Sparql_147": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }",
            "Sparql_354": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Mount_Everest locatedInArea ?uri . ?uri rdf:type Country }",
            "Sparql_406": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Country ; language Japanese_language }"
        }
    }, {
         "pattern": "crisis",
        "predicates": ["Cuban_Missile_Crisis"],
        "questions": {
            "198": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?"
        },
        "Sparql": {
            "Sparql_198": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Cuban_Missile_Crisis date ?x . Bay_of_Pigs_Invasion date ?y FILTER ( ?x < ?y ) }"
        }
    }, {
         "pattern": "cruise",
        "predicates": ["Tom_Cruise"],
        "questions": {
            "152": "Who has Tom Cruise been married to?",
            "171": "Give me all movies with Tom Cruise."
        },
        "Sparql": {
            "Sparql_152": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Tom_Cruise> }",
            "Sparql_171": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }"
        }
    }, {
         "pattern": "cup_2018",
        "predicates": ["dbr:2018_FIFA_World_Cup"],
        "questions": {
            "281": "When will start the final match of the football world cup 2018?"
        },
        "Sparql": {
            "Sparql_281": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?Date WHERE { dbr:2018_FIFA_World_Cup dbp:date ?Date } ORDER BY DESC(?Date) LIMIT 1"
        }
    }, {
         "pattern": "czech",
        "predicates": ["Czech_Republic"],
        "questions": {
            "386": "What is the currency of the Czech Republic?"
        },
        "Sparql": {
            "Sparql_386": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Czech_Republic currency ?uri }"
        }
    }, {
         "pattern": "dancers",
        "predicates": ["The_Three_Dancers"],
        "questions": {
            "355": "To which artistic movement did the painter of The Three Dancers belong?"
        },
        "Sparql": {
            "Sparql_355": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { The_Three_Dancers author ?person . ?person movement ?uri }"
        }
    }, {
         "pattern": "dbpedia",
        "predicates": ["DBpedia "],
        "questions": {
            "212": "Who are the developers of DBpedia?"
        },
        "Sparql": {
            "Sparql_212": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { DBpedia developer ?uri }"
        }
    }, {
         "pattern": "democrat",
        "predicates": ["Democratic_Party_(United_States)"],
        "questions": {
            "274": "Is Barack Obama a democrat?"
        },
        "Sparql": {
            "Sparql_274": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Barack_Obama party <http://dbpedia.org/resource/Democratic_Party_(United_States)> }"
        }
    }, {
         "pattern": "denmark",
        "predicates": ["Denmark"],
        "questions": {
            "143": "Give me a list of all lakes in Denmark."
        },
        "Sparql": {
            "Sparql_143": "SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> } UNION { ?uri a <http://dbpedia.org/class/yago/LakesOfDenmark> } }"
        }
    }, {
         "pattern": "disorder",
        "predicates": ["WikicatEatingDisorders"],
        "questions": {
            "103": "Give me all types of eating disorders."
        },
        "Sparql": {
            "Sparql_103": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/class/yago/WikicatEatingDisorders> }"
        }
    }, {
         "pattern": "dog",
        "predicates": ["German_Shepherd"],
        "questions": {
            "185": "Give me all breeds of the German Shepherd dog."
        },
        "Sparql": {
            "Sparql_185": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/breed> <http://dbpedia.org/resource/German_Shepherd> }"
        }
    }, {
         "pattern": "dortmund",
        "predicates": ["Dortmund_Airport"],
        "questions": {
            "373": "Which subsidiary of Lufthansa serves both Dortmund and Berlin Tegel?"
        },
        "Sparql": {
            "Sparql_373": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Lufthansa subsidiary ?uri . ?uri targetAirport Dortmund_Airport ; targetAirport Berlin_Tegel_Airport }"
        }
    }, {
         "pattern": "dream",
        "predicates": ["dbr:The_Interpretation_of_Dreams"],
        "questions": {
            "238": "Who is the author of the interpretation of dreams?"
        },
        "Sparql": {
            "Sparql_238": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams author ?Author }"
        }
    }, {
         "pattern": "driver",
        "predicates": ["FormulaOneRacer"],
        "questions": {
            "311": "Who is the Formula 1 race driver with the most races?"
        },
        "Sparql": {
            "Sparql_311": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type FormulaOneRacer ; races ?x } ORDER BY DESC(?x) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "düsseldorf",
        "predicates": ["dbr:Düsseldorf_Airport"],
        "questions": {
            "216": "how much is the elevation of Düsseldorf Airport ?"
        },
        "Sparql": {
            "Sparql_216": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ele WHERE { dbr:Düsseldorf_Airport elevation ?ele } LIMIT 1"
        }
    }, {
         "pattern": "earth",
        "predicates": ["The_Pillars_of_the_Earth","Mountain"],
        "questions": {
            "21": "Who wrote the book The pillars of the Earth?",
            "335": "Who wrote the book The Pillars of the Earth?"
        },
        "Sparql": {
            "Sparql_21": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { The_Pillars_of_the_Earth author ?uri }",
            "Sparql_335": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { The_Pillars_of_the_Earth author ?uri }"
        }
    }, {
         "pattern": "eiffel",
        "predicates": ["Eiffel_Tower"],
        "questions": {
            "67": "Where did the architect of the Eiffel Tower study?"
        },
        "Sparql": {
            "Sparql_67": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eiffel_Tower> <http://dbpedia.org/ontology/architect> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri }"
        }
    }, {
         "pattern": "electronics",
        "predicates": ["Electronics"],
        "questions": {
            "263": "Which electronics companies were founded in Beijing?"
        },
        "Sparql": {
            "Sparql_263": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Company ; industry Electronics ; foundationPlace Beijing }"
        }
    }, {
         "pattern": "elephant",
        "predicates": ["dbr:Elephant"],
        "questions": {
            "255": "Which species does an elephant belong?"
        },
        "Sparql": {
            "Sparql_255": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?species WHERE { dbr:Elephant dbp:species ?species }"
        }
    }, {
         "pattern": "england",
        "predicates": ["yago:WikicatEnglishMonarchs"],
        "questions": {
            "219": "Who was the first King of England?"
        },
        "Sparql": {
            "Sparql_219": "PREFIX  <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Royalty ; rdf:type yago:WikicatEnglishMonarchs ; activeYearsStartYear ?date } ORDER BY ASC(?date) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "estonia",
        "predicates": ["Estonia"],
        "questions": {
            "187": "Which languages are spoken in Estonia?"
        },
        "Sparql": {
            "Sparql_187": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spokenIn> <http://dbpedia.org/resource/Estonia> }"
        }
    }, {
         "pattern": "eurasia",
        "predicates": ["Eurasia"],
        "questions": {
            "351": "How many people live in Eurasia?"
        },
        "Sparql": {
            "Sparql_351": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?population WHERE { Eurasia populationTotal ?population }"
        }
    }, {
         "pattern": "euro",
        "predicates": ["Euro"],
        "questions": {
            "102": "Which countries adopted the Euro?"
        },
        "Sparql": {
            "Sparql_102": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Euro> } UNION { ?uri <http://dbpedia.org/property/currencyCode> \"EUR\"@en } }"
        }
    }, {
         "pattern": "eve",
        "predicates": ["Amazon_Eve"],
        "questions": {
            "392": "How tall is Amazon Eve?"
        },
        "Sparql": {
            "Sparql_392": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?height WHERE { Amazon_Eve height ?height }"
        }
    }, {
         "pattern": "everest",
        "predicates": ["Mount_Everest"],
        "questions": {
            "354": "What country is Mount Everest in?",
            "384": "Who was the first to climb Mount Everest?"
        },
        "Sparql": {
            "Sparql_354": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Mount_Everest locatedInArea ?uri . ?uri rdf:type Country }",
            "Sparql_384": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Mount_Everest firstAscentPerson ?uri }"
        }
    }, {
         "pattern": "everyone",
        "predicates": ["Person"],
        "questions": {
            "79": "Show me everyone who was born on Halloween."
        },
        "Sparql": {
            "Sparql_79": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/birthDate> ?date } UNION { ?uri <http://dbpedia.org/property/birthDate> ?date } <http://dbpedia.org/resource/Halloween> <http://dbpedia.org/property/date> ?date }"
        }
    }, {
         "pattern": "facebook",
        "predicates": ["Facebook"],
        "questions": {
            "170": "Who is the owner of Facebook?"
        },
        "Sparql": {
            "Sparql_170": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/ontology/foundedBy> ?uri }"
        }
    }, {
         "pattern": "family",
        "predicates": ["Family_Guy"],
        "questions": {
            "365": "Who created Family Guy?"
        },
        "Sparql": {
            "Sparql_365": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Family_Guy creator ?uri }"
        }
    }, {
         "pattern": "farmers",
        "predicates": ["Farmers"],
        "questions": {
            "401": "Who writes the Farmers' Almanac?"
        },
        "Sparql": {
            "Sparql_401": "PREFIX dbp: <http://dbpedia.org/property/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Farmers'_Almanac> dbp:editor ?uri }"
        }
    }, {
         "pattern": "fdny",
        "predicates": ["New_York_City_Fire_Department"],
        "questions": {
            "111": "What is the total amount of men and women serving in the FDNY?"
        },
        "Sparql": {
            "Sparql_111": "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/New_York_City_Fire_Department> <http://dbpedia.org/property/employees> ?num }"
        }
    }, {
         "pattern": "fiction",
        "predicates": ["Pulp_Fiction"],
        "questions": {
            "342": "How much did Pulp Fiction cost?"
        },
        "Sparql": {
            "Sparql_342": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { Pulp_Fiction budget ?n }"
        }
    }, {
         "pattern": "fifa",
        "predicates": ["Brazil_national_football_team"],
        "questions": {
            "105": "What was Brazil's lowest rank in the FIFA World Ranking?"
        },
        "Sparql": {
            "Sparql_105": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Brazil_national_football_team> <http://dbpedia.org/property/fifaMin> ?n }"
        }
    }, {
         "pattern": "films",
        "predicates": ["Film"],
        "questions": {
            "11": "Give me all Danish films.",
            "50": "How many films did Hal Roach produce?",
            "63": "In which films directed by Garry Marshall was Julia Roberts starring?",
            "84": "Who produced the most films?",
            "106": "How many films did Leonardo DiCaprio star in?",
            "124": "Which films starring Clint Eastwood did he direct himself?",
            "161": "Give me all films produced by Hal Roach.",
            "182": "Give me all films produced by Steven Spielberg with a budget of at least $80 million.",
            "184": "Who produced films starring Natalie Portman?",
            "282": "Which films did Stanley Kubrick direct?",
            "390": "In which films did Julia Roberts as well as Richard Gere play?",
            "407": "Which of Tim Burton's films had the highest budget?"
        },
        "Sparql": {
            "Sparql_11": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Film ; country Denmark }",
            "Sparql_50": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> }",
            "Sparql_63": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Julia_Roberts> ; <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Garry_Marshall> }",
            "Sparql_84": "SELECT DISTINCT ?uri WHERE { ?film <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?film <http://dbpedia.org/ontology/producer> ?uri . } ORDER BY DESC(COUNT(?film)) OFFSET 0 LIMIT 1",
            "Sparql_106": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Leonardo_DiCaprio> }",
            "Sparql_124": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Clint_Eastwood> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Clint_Eastwood> }",
            "Sparql_161": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Hal_Roach> }",
            "Sparql_182": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Steven_Spielberg> . ?uri <http://dbpedia.org/ontology/budget> ?b . FILTER( xsd:double(?b) >= 8.0E7 ) }",
            "Sparql_184": "SELECT DISTINCT ?uri WHERE { ?film a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Natalie_Portman> ; <http://dbpedia.org/ontology/producer> ?uri }",
            "Sparql_282": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri director Stanley_Kubrick }",
            "Sparql_390": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Film ; starring Julia_Roberts ; starring Richard_Gere }",
            "Sparql_407": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri director Tim_Burton ; budget ?b } ORDER BY ?b OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "finance",
        "predicates": ["Federal_Ministry_of_Finance_(Germany)"],
        "questions": {
            "202": "Who is the current federal minister of finance in Germany?"
        },
        "Sparql": {
            "Sparql_202": "PREFIX  <http://dbpedia.org/ontology/> SELECT ?leader WHERE { <http://dbpedia.org/resource/Federal_Ministry_of_Finance_(Germany)> leader ?leader }"
        }
    }, {
         "pattern": "florida",
        "predicates": ["Melbourne,_Florida"],
        "questions": {
            "353": "What is the total population of Melbourne, Florida?"
        },
        "Sparql": {
            "Sparql_353": "PREFIX  <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Melbourne,_Florida> populationTotal ?uri }"
        }
    }, {
         "pattern": "football",
        "predicates": ["dbr:2018_FIFA_World_Cup"],
        "questions": {
            "281": "When will start the final match of the football world cup 2018?"
        },
        "Sparql": {
            "Sparql_281": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?Date WHERE { dbr:2018_FIFA_World_Cup dbp:date ?Date } ORDER BY DESC(?Date) LIMIT 1"
        }
    }, {
         "pattern": "forbes",
        "predicates": ["Forbes"],
        "questions": {
            "220": "Who is the editor of Forbes?"
        },
        "Sparql": {
            "Sparql_220": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Forbes editor ?uri }"
        }
    }, {
         "pattern": "formula",
        "predicates": ["FormulaOneRacer"],
        "questions": {
            "311": "Who is the Formula 1 race driver with the most races?"
        },
        "Sparql": {
            "Sparql_311": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type FormulaOneRacer ; races ?x } ORDER BY DESC(?x) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "foundation",
        "predicates": ["Foundation_series"],
        "questions": {
            "347": "Show me all books in Asimov's Foundation series."
        },
        "Sparql": {
            "Sparql_347": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri series Foundation_series }"
        }
    }, {
         "pattern": "franc",
        "predicates": ["West_African_CFA_franc"],
        "questions": {
            "147": "In which countries can you pay using the West African CFA franc?"
        },
        "Sparql": {
            "Sparql_147": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }"
        }
    }, {
         "pattern": "france",
        "predicates": ["France"],
        "questions": {
            "387": "Where in France is sparkling wine produced?"
        },
        "Sparql": {
            "Sparql_387": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri wineProduced Sparkling_wine ; location France }"
        }
    }, {
         "pattern": "friends",
        "predicates": ["dbr:Friends"],
        "questions": {
            "226": "When was the last episode of the TV series Friends aired?"
        },
        "Sparql": {
            "Sparql_226": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?date WHERE { dbr:Friends completionDate ?date }"
        }
    }, {
         "pattern": "fring",
        "predicates": ["Gus_Fring"],
        "questions": {
            "204": "Who played Gus Fring in Breaking Bad?"
        },
        "Sparql": {
            "Sparql_204": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Gus_Fring portrayer ?uri }"
        }
    }, {
         "pattern": "galactica",
        "predicates": ["Battlestar_Galactica_%282004_TV_series%29"],
        "questions": {
            "160": "Does the new Battlestar Galactica series have more episodes than the old one?"
        },
        "Sparql": {
            "Sparql_160": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { <http://dbpedia.org/resource/Battlestar_Galactica_%281978_TV_series%29> numberOfEpisodes ?x . <http://dbpedia.org/resource/Battlestar_Galactica_%282004_TV_series%29> numberOfEpisodes ?y FILTER ( ?y > ?x ) }"
        }
    }, {
         "pattern": "game",
        "predicates": ["World_of_Warcraft", "Game_of_Thrones", "VideoGame", "Category:Action_role-playing_video_games", "The_Hunger_Games", "GMT_Games"],
        "questions": {
            "32": "What are the top-10 action role-playing video games according to IGN?",
            "129": "Who wrote The Hunger Games?",
            "232": "Who developed the video game World of Warcraft?",
            "290": "List all games by GMT.",
            "295": "Give me all video games published by Mean Hamster Software.",
            "338": "Does Breaking Bad have more episodes than Game of Thrones?",
            "358": "Is there a video game called Battle Chess?",
            "397": "Who wrote the Game of Thrones theme?"
        },
        "Sparql": {
            "Sparql_32": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
            "Sparql_129": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Hunger_Games> <http://dbpedia.org/property/author> ?uri }",
            "Sparql_232": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { World_of_Warcraft developer ?uri }",
            "Sparql_290": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri publisher GMT_Games }",
            "Sparql_295": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type VideoGame ; publisher Mean_Hamster_Software }",
            "Sparql_338": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Breaking_Bad numberOfEpisodes ?x . Game_of_Thrones numberOfEpisodes ?y FILTER ( ?y > ?x ) }",
            "Sparql_358": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?uri rdf:type VideoGame ; rdfs:label \"Battle Chess\"@en }",
            "Sparql_397": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Game_of_Thrones composer ?uri }"
        }
    }, {
         "pattern": "gange",
        "predicates": ["Ganges"],
        "questions": {
            "395": "In which country does the Ganges start?"
        },
        "Sparql": {
            "Sparql_395": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Ganges sourceCountry ?uri }"
        }
    }, {
         "pattern": "germany",
        "predicates": ["Chancellor_of_Germany","Germany","dbr:Germany","Federal_Ministry_of_Finance_(Germany)","dbc:Cities_in_Germany"],
        "questions": {
            "78": "Give me all federal chancellors of Germany.",
            "82": "Which actors were born in Germany?",
            "154": "What is the smallest city by area in Germany?",
            "202": "Who is the current federal minister of finance in Germany?",
            "288": "how much is the population densty rank of germany?"
        },
        "Sparql": {
            "Sparql_78": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/office> \"Chancellor of Germany\" } UNION { ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Chancellor_of_Germany> } }",
            "Sparql_82": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Actor> { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/ontology/birthPlace> ?place . ?place <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
            "Sparql_154": "PREFIX  <http://dbpedia.org/ontology/> PREFIX skos: <http://www.w3.org/2004/02/skos/core#> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT ?city WHERE { ?m skos:broader dbc:Cities_in_Germany . ?city dct:subject ?m ; areaTotal ?area } ORDER BY ?area LIMIT 1",
            "Sparql_202": "PREFIX  <http://dbpedia.org/ontology/> SELECT ?leader WHERE { <http://dbpedia.org/resource/Federal_Ministry_of_Finance_(Germany)> leader ?leader }",
            "Sparql_288": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?rank WHERE { dbr:Germany dbp:populationDensityRank ?rank }"
        }
    }, {
         "pattern": "gimp",
        "predicates": ["GIMP"],
        "questions": {
            "247": "In which programming language is GIMP written?"
        },
        "Sparql": {
            "Sparql_247": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { GIMP programmingLanguage ?uri }"
        }
    }, {
         "pattern": "giza",
        "predicates": ["dbr:Great_Pyramid_of_Giza"],
        "questions": {
            "359": "Who was buried in the Great Pyramid of Giza?"
        },
        "Sparql": {
            "Sparql_359": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri restingPlace dbr:Great_Pyramid_of_Giza }"
        }
    }, {
         "pattern": "gmt",
        "predicates": ["GMT_Games "],
        "questions": {
            "1": "List all boardgames by GMT.",
            "290": "List all games by GMT."
        },
        "Sparql": {
            "Sparql_1": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri publisher GMT_Games }",
            "Sparql_290": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri publisher GMT_Games }"
        }
    }, {
         "pattern": "goldman",
        "predicates": ["William_Goldman"],
        "questions": {
            "371": "Give me all books by William Goldman with more than 300 pages."
        },
        "Sparql": {
            "Sparql_371": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Book ; author William_Goldman ; numberOfPages ?x FILTER ( ?x > 300 ) }"
        }
    }, {
         "pattern": "goldmine",
        "predicates": ["Velvet_Goldmine"],
        "questions": {
            "314": "Is Christian Bale starring in Velvet Goldmine?"
        },
        "Sparql": {
            "Sparql_314": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Velvet_Goldmine starring Christian_Bale }"
        }
    }, {
         "pattern": "goofy",
        "predicates": ["Goofy"],
        "questions": {
            "87": "Who created Goofy?"
        },
        "Sparql": {
            "Sparql_87": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goofy> <http://dbpedia.org/ontology/creator> ?uri }"
        }
    }, {
         "pattern": "google",
        "predicates": ["Google"],
        "questions": {
            "85": "How many employees does Google have?"
        },
        "Sparql": {
            "Sparql_85": "SELECT DISTINCT ?num WHERE { <http://dbpedia.org/resource/Google> <http://dbpedia.org/ontology/numberOfEmployees> ?num }"
        }
    }, {
         "pattern": "grand",
        "predicates": ["Grand_Prix_(Cannes_Film_Festival)"],
        "questions": {
            "309": "Did Kaurismäki ever win the Grand Prix at Cannes?"
        },
        "Sparql": {
            "Sparql_309": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Aki_Kaurismäki award <http://dbpedia.org/resource/Grand_Prix_(Cannes_Film_Festival)> }"
        }
    }, {
         "pattern": "grape",
        "predicates": ["Oregon_wine growingGrape"],
        "questions": {
            "323": "Which types of grapes grow in Oregon?"
        },
        "Sparql": {
            "Sparql_323": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Oregon_wine growingGrape ?uri }"
        }
    }, {
         "pattern": "great",
        "predicates": ["Great_Bear_Lake","dbr:Great_Pyramid_of_Giza"],
        "questions": {
            "346": "Is Lake Baikal bigger than the Great Bear Lake?",
            "359": "Who was buried in the Great Pyramid of Giza?"
        },
        "Sparql": {
            "Sparql_346": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Lake_Baikal areaTotal ?a1 . Great_Bear_Lake areaTotal ?a2 FILTER ( ?a1 > ?a2 ) }",
            "Sparql_359": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri restingPlace dbr:Great_Pyramid_of_Giza }"
        }
    }, {
         "pattern": "grunge_record",
        "predicates": ["Grunge"],
        "questions": {
            "394": "Give me all Canadian Grunge record labels."
        },
        "Sparql": {
            "Sparql_394": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type RecordLabel ; genre Grunge ; country Canada }"
        }
    }, {
         "pattern": "gus",
        "predicates": ["Gus_Fring"],
        "questions": {
            "204": "Who played Gus Fring in Breaking Bad?"
        },
        "Sparql": {
            "Sparql_204": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Gus_Fring portrayer ?uri }"
        }
    }, {
         "pattern": "guy",
        "predicates": ["Guy_Ritchie","Family_Guy"],
        "questions": {
            "12": "Which movies starring Brad Pitt were directed by Guy Ritchie?",
            "365": "Who created Family Guy?",
            "389": "Which movies starring Mickey Rourke were directed by Guy Ritchie?"
        },
        "Sparql": {
            "Sparql_12": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Film ; starring Brad_Pitt ; director Guy_Ritchie }",
            "Sparql_365": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Family_Guy creator ?uri }",
            "Sparql_389": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Film ; starring Mickey_Rourke ; director Guy_Ritchie }"
        }
    }, {
         "pattern": "halloween",
        "predicates": ["Halloween"],
        "questions": {
            "79": "Show me everyone who was born on Halloween."
        },
        "Sparql": {
            "Sparql_79": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> { ?uri <http://dbpedia.org/ontology/birthDate> ?date } UNION { ?uri <http://dbpedia.org/property/birthDate> ?date } <http://dbpedia.org/resource/Halloween> <http://dbpedia.org/property/date> ?date }"
        }
    }, {
         "pattern": "hamster",
        "predicates": ["Mean_Hamster_Software"],
        "questions": {
            "295": "Give me all video games published by Mean Hamster Software."
        },
        "Sparql": {
            "Sparql_295": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type VideoGame ; publisher Mean_Hamster_Software }"
        }
    }, {
         "pattern": "hbo",
        "predicates": ["The_Sopranos"],
        "questions": {
            "158": "List all episodes of the first season of the HBO television series The Sopranos!",
            "331": "List all episodes of the first season of the HBO television series The Sopranos."
        },
        "Sparql": {
            "Sparql_158": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri series The_Sopranos ; seasonNumber 1 }",
            "Sparql_331": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri series The_Sopranos ; seasonNumber 1 }"
        }
    }, {
         "pattern": "headquarter",
        "predicates": ["Secret_Intelligence_Service","Headquarters_of_the_United_Nations"],
        "questions": {
            "364": "In which UK city are the headquarters of the MI6?",
            "404": "In which city are the headquarters of the United Nations?"
        },
        "Sparql": {
            "Sparql_364": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Secret_Intelligence_Service headquarter ?uri . ?uri country United_Kingdom }",
            "Sparql_404": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Headquarters_of_the_United_Nations location ?uri . ?uri rdf:type City }"
        }
    }, {
         "pattern": "health",
        "predicates": ["UNC_Health_Care"],
        "questions": {
            "176": "What are the specialities of the UNC Health Care?"
        },
        "Sparql": {
            "Sparql_176": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/UNC_Health_Care> <http://dbpedia.org/property/speciality> ?uri }"
        }
    }, {
         "pattern": "hells",
        "predicates": ["Hells_Angels"],
        "questions": {
            "92": "When were the Hells Angels founded?"
        },
        "Sparql": {
            "Sparql_92": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Hells_Angels> <http://dbpedia.org/property/founded> ?date }"
        }
    }, {
         "pattern": "heraklion",
        "predicates": ["Heraklion"],
        "questions": {
            "3": "Which people were born in Heraklion?"
        },
        "Sparql": {
            "Sparql_3": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }"
        }
    }, {
         "pattern": "heritage",
        "predicates": ["WorldHeritageSite"],
        "questions": {
            "68": "Give me all world heritage sites designated within the past two years."
        },
        "Sparql": {
            "Sparql_68": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WorldHeritageSite> . { ?uri <http://dbpedia.org/property/year> '2013'^^xsd:integer . } UNION { ?uri <http://dbpedia.org/property/year> '2014'^^xsd:integer . } }"
        }
    }, {
         "pattern": "hero",
        "predicates": ["Last_Action_Hero"],
        "questions": {
            "412": "Give me all actors starring in Last Action Hero."
        },
        "Sparql": {
            "Sparql_412": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Last_Action_Hero starring ?uri }"
        }
    }, {
         "pattern": "himalaya",
        "predicates": ["Himalayas"],
        "questions": {
            "55": "Give me the capitals of all countries that the Himalayas run through."
        },
        "Sparql": {
            "Sparql_55": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?country . ?country <http://dbpedia.org/ontology/capital> ?uri }"
        }
    }, {
         "pattern": "hockey",
        "predicates": ["Turkish_Ice_Hockey_First_League"],
        "questions": {
            "208": "Who is the coach of Ankara's ice hockey team?"
        },
        "Sparql": {
            "Sparql_208": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x city Ankara ; league Turkish_Ice_Hockey_First_League ; coach ?uri }"
        }
    }, {
         "pattern": "holiday",
        "predicates": ["Holiday","Holiday"],
        "questions": {
            "94": "Give me all Swedish holidays.",
            "148": "Which holidays are celebrated around the world?",
            "305": "Which holidays are celebrated around the world? test2"
        },
        "Sparql": {
            "Sparql_94": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Holiday> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Sweden> }",
            "Sparql_148": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Holiday }",
            "Sparql_305": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Holiday }"
        }
    }, {
         "pattern": "horse",
        "predicates": ["dbr:Horse_racing"],
        "questions": {
            "223": "Is horse racing a sport?"
        },
        "Sparql": {
            "Sparql_223": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { dbr:Horse_racing rdf:type Sport }"
        }
    }, {
         "pattern": "hotel",
        "predicates": ["Hotel_California "],
        "questions": {
            "379": "Who wrote the song Hotel California?"
        },
        "Sparql": {
            "Sparql_379": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Hotel_California writer ?uri }"
        }
    }, {
         "pattern": "house",
        "predicates": ["Palace_of_Westminster"],
        "questions": {
            "215": "What is the location of the Houses of Parliament?"
        },
        "Sparql": {
            "Sparql_215": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT ?uri WHERE { Palace_of_Westminster location ?uri }"
        }
    }, {
         "pattern": "hovercrafts",
        "predicates": ["Hovercraft"],
        "questions": {
            "253": "Which companies produce hovercrafts?"
        },
        "Sparql": {
            "Sparql_253": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Company ; product Hovercraft }"
        }
    }, {
         "pattern": "hunger",
        "predicates": ["The_Hunger_Games"],
        "questions": {
            "129": "Who wrote The Hunger Games?"
        },
        "Sparql": {
            "Sparql_129": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Hunger_Games> <http://dbpedia.org/property/author> ?uri }"
        }
    }, {
         "pattern": "ibm",
        "predicates": ["IBM"],
        "questions": {
            "157": "How many employees does IBM have?"
        },
        "Sparql": {
            "Sparql_157": "SELECT DISTINCT ?number WHERE { <http://dbpedia.org/resource/IBM> <http://dbpedia.org/ontology/numberOfEmployees> ?number }"
        }
    }, {
         "pattern": "ice",
        "predicates": ["Turkish_Ice_Hockey_First_League"],
        "questions": {
            "208": "Who is the coach of Ankara's ice hockey team?"
        },
        "Sparql": {
            "Sparql_208": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x city Ankara ; league Turkish_Ice_Hockey_First_League ; coach ?uri }"
        }
    }, {
         "pattern": "icro",
        "predicates": ["ICRO"],
        "questions": {
            "159": "What does ICRO stand for?"
        },
        "Sparql": {
            "Sparql_159": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/abbreviation> \"ICRO\" }"
        }
    }, {
         "pattern": "illinois",
        "predicates": ["Illinois"],
        "questions": {
            "36": "Which states border Illinois?"
        },
        "Sparql": {
            "Sparql_36": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }"
        }
    }, {
         "pattern": "industry",
        "predicates": ["industry"],
        "questions": {
            "97": "Give me all companies in the advertising industry."
        },
        "Sparql": {
            "Sparql_97": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Advertising> } UNION { ?uri <http://dbpedia.org/ontology/industry> ?industry FILTER regex(?industry, \"advertising\", \"i\") } }"
        }
    }, {
         "pattern": "interpretation",
        "predicates": ["dbr:instrument"],
        "questions": {
            "238": "Who is the author of the interpretation of dreams?"
        },
        "Sparql": {
            "Sparql_238": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?Author WHERE { dbr:The_Interpretation_of_Dreams author ?Author }"
        }
    }, {
         "pattern": "invasion",
        "predicates": ["Bay_of_Pigs_Invasion"],
        "questions": {
            "198": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?"
        },
        "Sparql": {
            "Sparql_198": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Cuban_Missile_Crisis date ?x . Bay_of_Pigs_Invasion date ?y FILTER ( ?x < ?y ) }"
        }
    }, {
         "pattern": "iran",
        "predicates": ["dbr:Geography_of_Iran"],
        "questions": {
            "262": "With how many countries Iran has borders?"
        },
        "Sparql": {
            "Sparql_262": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?border WHERE { dbr:Geography_of_Iran dbp:borders ?border } LIMIT 8"
        }
    }, {
         "pattern": "iraq",
        "predicates": ["dbr:Iraq"],
        "questions": {
            "283": "how much is the population  Iraq?"
        },
        "Sparql": {
            "Sparql_283": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?pIraq WHERE { dbr:Iraq populationTotal ?pIraq }"
        }
    }, {
         "pattern": "ireland",
        "predicates": ["Beer_in_Ireland"],
        "questions": {
            "80": "Which beer originated in Ireland?"
        },
        "Sparql": {
            "Sparql_80": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Beer> ; <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Beer_in_Ireland> }"
        }
    }, {
         "pattern": "isar",
        "predicates": ["Isar"],
        "questions": {
            "268": "Does the Isar flow into a lake?"
        },
        "Sparql": {
            "Sparql_268": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?x inflow Isar ; rdf:type Lake }"
        }
    }, {
         "pattern": "island",
        "predicates": ["Island"],
        "questions": {
            "59": "Give me all islands that belong to Japan."
        },
        "Sparql": {
            "Sparql_59": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }"
        }
    }, {
         "pattern": "istanbul",
        "predicates": ["Istanbul"],
        "questions": {
            "100": "Which writers studied in Istanbul?"
        },
        "Sparql": {
            "Sparql_100": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> { ?uri <http://dbpedia.org/ontology/almaMater> ?x } UNION { ?uri <http://dbpedia.org/ontology/education> ?x } { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Istanbul> } UNION { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Istanbul> } }"
        }
    }, {
         "pattern": "italy",
        "predicates": ["Italy"],
        "questions": {
            "289": "What is the highest mountain in Italy?"
        },
        "Sparql": {
            "Sparql_289": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Mountain ; locatedInArea Italy ; elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "iycm",
        "predicates": ["\"IYCM\""],
        "questions": {
            "322": "What does IYCM stand for?"
        },
        "Sparql": {
            "Sparql_322": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri abbreviation \"IYCM\" }"
        }
    }, {
         "pattern": "japan",
        "predicates": ["Japan"],
        "questions": {
            "47": "Which volcanos in Japan erupted since 2000?",
            "59": "Give me all islands that belong to Japan."
        },
        "Sparql": {
            "Sparql_47": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Japan> ; <http://dbpedia.org/ontology/eruptionYear> ?date FILTER ( year(?date) >= 2000 ) }",
            "Sparql_59": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Island> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> }"
        }
    }, {
         "pattern": "japanese",
        "predicates": ["Japanese_language"],
        "questions": {
            "406": "In which countries do people speak Japanese?"
        },
        "Sparql": {
            "Sparql_406": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Country ; language Japanese_language }"
        }
    }, {
         "pattern": "javascript",
        "predicates": ["JavaScript"],
        "questions": {
            "122": "Which programming languages influenced Javascript?"
        },
        "Sparql": {
            "Sparql_122": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> ; <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/JavaScript> }"
        }
    }, {
         "pattern": "jersey",
        "predicates": ["New_Jersey"],
        "questions": {
            "173": "Give me all cities in New Jersey with more than 100000 inhabitants."
        },
        "Sparql": {
            "Sparql_173": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type City ; isPartOf New_Jersey ; populationTotal ?inhabitants FILTER ( ?inhabitants > 100000 ) }"
        }
    },  {
         "pattern": "jew",
        "predicates": ["\"Jewish\"@en"],
        "questions": {
            "104": "Was Marc Chagall a jew?"
        },
        "Sparql": {
            "Sparql_104": "ASK WHERE { <http://dbpedia.org/resource/Marc_Chagall> <http://dbpedia.org/property/ethnicity> \"Jewish\"@en }"
        }
    }, {
         "pattern": "jfk",
        "predicates": ["John_F._Kennedy"],
        "questions": {
            "77": "Where was JFK assassinated?"
        },
        "Sparql": {
            "Sparql_77": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/ontology/deathPlace> ?uri }"
        }
    }, {
         "pattern": "jupiter",
        "predicates": ["Jupiter"],
        "questions": {
            "156": "How heavy is Jupiter's lightest moon?"
        },
        "Sparql": {
            "Sparql_156": "SELECT DISTINCT ?n WHERE { ?uri <http://dbpedia.org/property/satelliteOf> <http://dbpedia.org/resource/Jupiter> ; <http://dbpedia.org/ontology/mass> ?n } ORDER BY ASC(?n) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "khalifa",
        "predicates": ["Burj_Khalifa"],
        "questions": {
            "340": "Which building after the Burj Khalifa has the most floors?"
        },
        "Sparql": {
            "Sparql_340": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Burj_Khalifa floorCount ?burj . ?uri rdf:type Building ; floorCount ?proj FILTER ( ?proj < ?burj ) } ORDER BY DESC(?proj) LIMIT 1"
        }
    }, {
         "pattern": "king",
        "predicates": ["Royalty","King_of_Rome"],
        "questions": {
            "178": "List the seven kings of Rome.",
            "192": "Who is the king of the Netherlands?",
            "219": "Who was the first King of England?"
        },
        "Sparql": {
            "Sparql_178": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/King_of_Rome> }",
            "Sparql_192": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Netherlands leader ?uri . ?uri rdf:type Royalty }",
            "Sparql_219": "PREFIX  <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Royalty ; rdf:type yago:WikicatEnglishMonarchs ; activeYearsStartYear ?date } ORDER BY ASC(?date) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "label",
        "predicates": ["RecordLabel"],
        "questions": {
            "394": "Give me all Canadian Grunge record labels."
        },
        "Sparql": {
            "Sparql_394": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type RecordLabel ; genre Grunge ; country Canada }"
        }
    }, {
         "pattern": "lake",
        "predicates": ["Lake_Placid_(Texas)", "Lake", "Limerick_Lake", "Lake_Baikal"],
        "questions": {
            "28": "How deep is Lake Placid?",
            "57": "Which rivers flow into a German lake?",
            "143": "Give me a list of all lakes in Denmark.",
            "268": "Does the Isar flow into a lake?",
            "294": "In which country is the Limerick Lake?",
            "346": "Is Lake Baikal bigger than the Great Bear Lake?"
        },
        "Sparql": {
            "Sparql_28": "PREFIX  <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> maximumDepth ?n }",
            "Sparql_57": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> . ?x <http://dbpedia.org/ontology/inflow> ?uri ; a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> }",
            "Sparql_268": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?x inflow Isar ; rdf:type Lake }",
            "Sparql_294": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Limerick_Lake country ?uri }",
            "Sparql_346": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Lake_Baikal areaTotal ?a1 . Great_Bear_Lake areaTotal ?a2 FILTER ( ?a1 > ?a2 ) }",
            "Sparql_143": "SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> } UNION { ?uri a <http://dbpedia.org/class/yago/LakesOfDenmark> } }"
        }
    }, {
         "pattern": "language",
        "predicates": ["ProgrammingLanguage","Language"],
        "questions": {
            "114": "Which programming languages were influenced by Perl?",
            "122": "Which programming languages influenced Javascript?",
            "168": "How many programming languages are there?",
            "385": "How many languages are spoken in Colombia?"
        },
        "Sparql": {
            "Sparql_114": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> { ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Perl> } UNION { <http://dbpedia.org/resource/Perl> <http://dbpedia.org/ontology/influenced> ?uri } }",
            "Sparql_122": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> ; <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/JavaScript> }",
            "Sparql_168": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }",
            "Sparql_385": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri rdf:type Language . Colombia language ?uri }"
        }
    }, {
         "pattern": "latvia",
        "predicates": ["Latvia"],
        "questions": {
            "138": "When did Latvia join the EU?"
        },
        "Sparql": {
            "Sparql_138": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Latvia> <http://dbpedia.org/property/accessioneudate> ?date }"
        }
    }, {
         "pattern": "launch",
        "predicates": ["LaunchPad"],
        "questions": {
            "231": "Give me all launch pads operated by NASA."
        },
        "Sparql": {
            "Sparql_231": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type LaunchPad ; operator NASA }"
        }
    }, {
         "pattern": "league",
        "predicates": ["Premier_League"],
        "questions": {
            "64": "Give me all soccer clubs in the Premier League."
        },
        "Sparql": {
            "Sparql_64": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Premier_League> }"
        }
    },{
         "pattern": "lego",
        "predicates": ["The_Lego_Movie"],
        "questions": {
            "329": "How much did the Lego Movie cost?"
        },
        "Sparql": {
            "Sparql_329": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { The_Lego_Movie budget ?n }"
        }
    }, {
         "pattern": "les",
        "predicates": ["The_Pillars_of_the_Earth"],
        "questions": {
            "195": "Who wrote the book Les Piliers de la terre?"
        },
        "Sparql": {
            "Sparql_195": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { The_Pillars_of_the_Earth author ?uri }"
        }
    }, {
         "pattern": "liberty",
        "predicates": ["Statue_of_Liberty"],
        "questions": {
            "35": "When was the Statue of Liberty built?"
        },
        "Sparql": {
            "Sparql_35": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }"
        }
    }, {
         "pattern": "library",
        "predicates": ["Library"],
        "questions": {
            "113": "Give me all libraries established earlier than 1400."
        },
        "Sparql": {
            "Sparql_113": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Library> ; <http://dbpedia.org/property/established> ?year FILTER ( ?year < 1400 ) }"
        }
    }, {
         "pattern": "lighthouse",
        "predicates": ["Colombo_Lighthouse"],
        "questions": {
            "298": "How high is the lighthouse in Colombo?"
        },
        "Sparql": {
            "Sparql_298": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { Colombo_Lighthouse height ?num }"
        }
    }, {
         "pattern": "limerick",
        "predicates": ["Limerick_Lake"],
        "questions": {
            "294": "In which country is the Limerick Lake?"
        },
        "Sparql": {
            "Sparql_294": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Limerick_Lake country ?uri }"
        }
    }, {
         "pattern": "lisbon",
        "predicates": ["Lisbon"],
        "questions": {
            "155": "What is the ruling party in Lisbon?"
        },
        "Sparql": {
            "Sparql_155": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lisbon> <http://dbpedia.org/property/leaderParty> ?uri }"
        }
    }, {
         "pattern": "literature",
        "predicates": ["Nobel_Prize_in_Literature"],
        "questions": {
            "33": "Give me all writers that won the Nobel Prize in literature."
        },
        "Sparql": {
            "Sparql_33": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }"
        }
    }, {
         "pattern": "london",
        "predicates": ["London"],
        "questions": {
            "29": "Show me all museums in London."
        },
        "Sparql": {
            "Sparql_29": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }"
        }
    }, {
         "pattern": "lufthansa",
        "predicates": ["Lufthansa"],
        "questions": {
            "373": "Which subsidiary of Lufthansa serves both Dortmund and Berlin Tegel?"
        },
        "Sparql": {
            "Sparql_373": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Lufthansa subsidiary ?uri . ?uri targetAirport Dortmund_Airport ; targetAirport Berlin_Tegel_Airport }"
        }
    }, {
         "pattern": "madrid",
        "predicates": ["Real_Madrid_C.F."],
        "questions": {
            "146": "Who is the manager of Real Madrid?",
            "334": "Does Neymar play for Real Madrid?"
        },
        "Sparql": {
            "Sparql_146": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Real_Madrid_C.F.> <http://dbpedia.org/ontology/manager> ?uri }",
            "Sparql_334": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Neymar team <http://dbpedia.org/resource/Real_Madrid_C.F.> }"
        }
    }, {
         "pattern": "malaysia",
        "predicates": ["dbr:Malaysia"],
        "questions": {
            "360": "Does the Ford Motor Company have a manufacturing plant in Malaysia?"
        },
        "Sparql": {
            "Sparql_360": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { ?uri assembly dbr:Malaysia ; manufacturer dbr:Ford_Motor_Company }"
        }
    }, {
         "pattern": "malta",
        "predicates": ["Malta"],
        "questions": {
            "139": "Which soccer players were born on Malta?"
        },
        "Sparql": {
            "Sparql_139": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }"
        }
    }, {
         "pattern": "manager",
        "predicates": ["manager"],
        "questions": {
            "146": "Who is the manager of Real Madrid?"
        },
        "Sparql": {
            "Sparql_146": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Real_Madrid_C.F.> <http://dbpedia.org/ontology/manager> ?uri }"
        }
    }, {
         "pattern": "manhattan",
        "predicates": ["Manhattan_Project"],
        "questions": {
            "328": "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?"
        },
        "Sparql": {
            "Sparql_328": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri knownFor Manhattan_Project ; rdf:type Scientist ; knownFor Nobel_Peace_Prize }"
        }
    }, {
         "pattern": "marine",
        "predicates": ["Yokohama_Marine_Tower"],
        "questions": {
            "304": "How high is the Yokohama Marine Tower?"
        },
        "Sparql": {
            "Sparql_304": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { Yokohama_Marine_Tower height ?num }"
        }
    }, {
         "pattern": "match",
        "predicates": ["dbr:2018_FIFA_World_Cup"],
        "questions": {
            "281": "When will start the final match of the football world cup 2018?"
        },
        "Sparql": {
            "Sparql_281": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?Date WHERE { dbr:2018_FIFA_World_Cup dbp:date ?Date } ORDER BY DESC(?Date) LIMIT 1"
        }
    }, {
         "pattern": "mckinley",
        "predicates": ["Mount_McKinley"],
        "questions": {
            "115": "In which U.S. state is Mount McKinley located?"
        },
        "Sparql": {
            "Sparql_115": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_McKinley> wikiPageRedirects ?x . ?x <http://dbpedia.org/ontology/locatedInArea> ?uri. ?uri rdf:type yago:WikicatStatesOfTheUnitedStates }"
        }
    }, {
         "pattern": "mean",
        "predicates": ["Mean_Hamster_Software"],
        "questions": {
            "295": "Give me all video games published by Mean Hamster Software."
        },
        "Sparql": {
            "Sparql_295": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type VideoGame ; publisher Mean_Hamster_Software }"
        }
    }, {
         "pattern": "mecca",
        "predicates": ["Mecca"],
        "questions": {
            "203": "In which country is Mecca located?"
        },
        "Sparql": {
            "Sparql_203": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Mecca country ?uri }"
        }
    }, {
         "pattern": "melbourne",
        "predicates": ["Melbourne,_Florida"],
        "questions": {
            "353": "What is the total population of Melbourne, Florida?"
        },
        "Sparql": {
            "Sparql_353": "PREFIX  <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Melbourne,_Florida> populationTotal ?uri }"
        }
    }, {
         "pattern": "melon",
        "predicates": ["Melon_de_Bourgogne"],
        "questions": {
            "276": "From which region is the Melon de Bourgogne?"
        },
        "Sparql": {
            "Sparql_276": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Melon_de_Bourgogne wineRegion ?uri }"
        }
    }, {
         "pattern": "metalcore",
        "predicates": ["Metalcore"],
        "questions": {
            "101": "Give me all Australian metalcore bands."
        },
        "Sparql": {
            "Sparql_101": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Band> ; <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Metalcore> { ?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/hometown> ?h . ?h <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }"
        }
    }, {
         "pattern": "metro",
        "predicates": ["dbr:Rapid_transit"],
        "questions": {
            "349": "Which city has the oldest running metro?"
        },
        "Sparql": {
            "Sparql_349": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?loc WHERE { ?uri type dbr:Rapid_transit ; openingYear ?date ; location ?loc . ?loc rdf:type City } ORDER BY ASC(?date) LIMIT 1"
        }
    }, {
         "pattern": "mexico",
        "predicates": ["dbr:States_of_Mexico"],
        "questions": {
            "327": "How many states are in Mexico?"
        },
        "Sparql": {
            "Sparql_327": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(?uri) AS ?count) WHERE { ?uri type dbr:States_of_Mexico }"
        }
    }, {
         "pattern": "mi6",
        "predicates": ["Secret_Intelligence_Service"],
        "questions": {
            "364": "In which UK city are the headquarters of the MI6?"
        },
        "Sparql": {
            "Sparql_364": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Secret_Intelligence_Service headquarter ?uri . ?uri country United_Kingdom }"
        }
    }, {
         "pattern": "miffy",
        "predicates": ["Miffy"],
        "questions": {
            "271": "Which country does the creator of Miffy come from?"
        },
        "Sparql": {
            "Sparql_271": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Miffy creator ?x . ?x nationality ?uri }"
        }
    }, {
         "pattern": "minecraft",
        "predicates": ["Minecraft"],
        "questions": {
            "37": "Who developed Minecraft?"
        },
        "Sparql": {
            "Sparql_37": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }"
        }
    }, {
         "pattern": "ming",
        "predicates": ["Ming_dynasty"],
        "questions": {
            "368": "When did the Ming dynasty dissolve?"
        },
        "Sparql": {
            "Sparql_368": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { Ming_dynasty dissolutionDate ?date }"
        }
    }, {
         "pattern": "minister",
        "predicates": ["Prime_Minister_of_Spain","Federal_Ministry_of_Finance_(Germany)"],
        "questions": {
            "132": "Where is the residence of the prime minister of Spain?",
            "202": "Who is the current federal minister of finance in Germany?"
        },
        "Sparql": {
            "Sparql_132": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Prime_Minister_of_Spain> <http://dbpedia.org/property/residence> ?uri }",
            "Sparql_202": "PREFIX  <http://dbpedia.org/ontology/> SELECT ?leader WHERE { <http://dbpedia.org/resource/Federal_Ministry_of_Finance_(Germany)> leader ?leader }"
        }
    }, {
         "pattern": "missile",
        "predicates": ["Cuban_Missile_Crisis"],
        "questions": {
            "198": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?"
        },
        "Sparql": {
            "Sparql_198": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Cuban_Missile_Crisis date ?x . Bay_of_Pigs_Invasion date ?y FILTER ( ?x < ?y ) }"
        }
    }, {
         "pattern": "monarch",
        "predicates": ["Monarch"],
        "questions": {
            "17": "Which monarchs were married to a German?"
        },
        "Sparql": {
            "Sparql_17": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Monarch ; spouse ?spouse { ?spouse birthPlace Germany } UNION { ?spouse birthPlace ?p . ?p country Germany } }"
        }
    }, {
         "pattern": "moscow",
        "predicates": ["Moscow"],
        "questions": {
            "40": "Give all swimmers that were born in Moscow."
        },
        "Sparql": {
            "Sparql_40": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }"
        }
    }, {
         "pattern": "motor",
        "predicates": ["dbr:Ford_Motor_Company"],
        "questions": {
            "360": "Does the Ford Motor Company have a manufacturing plant in Malaysia?"
        },
        "Sparql": {
            "Sparql_360": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { ?uri assembly dbr:Malaysia ; manufacturer dbr:Ford_Motor_Company }"
        }
    }, {
         "pattern": "mount",
        "predicates": ["Mount_McKinley","Mount_Everest"],
        "questions": {
            "115": "In which U.S. state is Mount McKinley located?",
            "354": "What country is Mount Everest in?",
            "384": "Who was the first to climb Mount Everest?"
        },
        "Sparql": {
            "Sparql_115": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_McKinley> wikiPageRedirects ?x . ?x <http://dbpedia.org/ontology/locatedInArea> ?uri. ?uri rdf:type yago:WikicatStatesOfTheUnitedStates }",
            "Sparql_354": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Mount_Everest locatedInArea ?uri . ?uri rdf:type Country }",
            "Sparql_384": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Mount_Everest firstAscentPerson ?uri }"
        }
    }, {
         "pattern": "mountain",
        "predicates": ["Himalayas", "Mountain", "Mountain", "Mountain"],
        "questions": {
            "81": "To which countries does the Himalayan mountain system extend?",
            "120": "What is the highest mountain?",
            "165": "What is the second highest mountain on Earth?",
            "174": "Which mountains are higher than the Nanga Parbat?",
            "289": "What is the highest mountain in Italy?",
            "400": "What is the highest mountain in Australia?"
        },
        "Sparql": {
            "Sparql_81": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Himalayas> <http://dbpedia.org/ontology/country> ?uri }",
            "Sparql_120": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1",
            "Sparql_165": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Mountain> ; <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1",
            "Sparql_174": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nanga_Parbat> <http://dbpedia.org/ontology/elevation> ?elevation . ?uri a <http://dbpedia.org/ontology/Mountain> { ?uri <http://dbpedia.org/ontology/elevation> ?otherelevation } UNION { ?uri <http://dbpedia.org/property/elevationM> ?otherelevation } FILTER ( ?otherelevation > ?elevation ) }",
            "Sparql_289": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Mountain ; locatedInArea Italy ; elevation ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "Sparql_400": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Mountain ; locatedInArea Australia ; elevation ?elevation } ORDER BY DESC(?elevation) LIMIT 1"
        }
    }, {
         "pattern": "movie",
        "predicates": ["The_Lego_Movie", "object=Film"],
        "questions": {
            "12": "Which movies starring Brad Pitt were directed by Guy Ritchie?",
            "39": "What movies does Jesse Eisenberg play in?",
            "51": "Give me all Danish movies.",
            "133": "Which actor was casted in the most movies?",
            "171": "Give me all movies with Tom Cruise.",
            "213": "Give me all movies directed by Francis Ford Coppola.",
            "329": "How much did the Lego Movie cost?",
            "345": "Who is starring in Spanish movies produced by Benicio del Toro?",
            "389": "Which movies starring Mickey Rourke were directed by Guy Ritchie?",
            "411": "What was the last movie with Alec Guinness?"
        },
        "Sparql": {
            "Sparql_12": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Film ; starring Brad_Pitt ; director Guy_Ritchie }",
            "Sparql_39": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
            "Sparql_51": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Denmark> }",
            "Sparql_133": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?f <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film> . ?f <http://dbpedia.org/ontology/starring> ?uri . } ORDER BY DESC(COUNT(DISTINCT(?f))) OFFSET 0 LIMIT 1",
            "Sparql_171": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Tom_Cruise> }",
            "Sparql_213": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Film ; director Francis_Ford_Coppola }",
            "Sparql_329": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { The_Lego_Movie budget ?n }",
            "Sparql_345": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?film rdf:type Film ; country Spain ; producer Benicio_del_Toro ; starring ?uri . ?uri rdf:type Person }",
            "Sparql_389": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Film ; starring Mickey_Rourke ; director Guy_Ritchie }",
            "Sparql_411": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Film ; starring Alec_Guinness ; releaseDate ?date } ORDER BY DESC(?date) LIMIT 1"
        }
    }, {
         "pattern": "munich",
        "predicates": ["Munich"],
        "questions": {
            "54": "Give me all companies in Munich."
        },
        "Sparql": {
            "Sparql_54": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Company> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Munich> } UNION { ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Munich> } }"
        }
    }, {
         "pattern": "museum",
        "predicates": ["Museum"],
        "questions": {
            "29": "Show me all museums in London.",
            "76": "How many museums does Paris have?",
            "408": "Which museum in New York has the most visitors?"
        },
        "Sparql": {
            "Sparql_29": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
            "Sparql_76": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Paris> }",
            "Sparql_408": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Museum ; location New_York_City ; numberOfVisitors ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "music",
        "predicates": ["Musical"],
        "questions": {
            "96": "List all the musicals with music by Leonard Bernstein.",
            "249": "List all the musicals with music by Elton John."
        },
        "Sparql": {
            "Sparql_96": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Musical> ; <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Leonard_Bernstein> }",
            "Sparql_249": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Musical ; musicBy Elton_John }"
        }
    }, {
         "pattern": "musical",
        "predicates": ["Musical"],
        "questions": {
            "96": "List all the musicals with music by Leonard Bernstein.",
            "249": "List all the musicals with music by Elton John."
        },
        "Sparql": {
            "Sparql_96": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Musical> ; <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Leonard_Bernstein> }",
            "Sparql_249": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Musical ; musicBy Elton_John }"
        }
    }, {
         "pattern": "musician",
        "predicates": ["Musician"],
        "questions": {
            "123": "Which musician wrote the most books?"
        },
        "Sparql": {
            "Sparql_123": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Musician> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "nasa",
        "predicates": ["NASA"],
        "questions": {
            "231": "Give me all launch pads operated by NASA."
        },
        "Sparql": {
            "Sparql_231": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type LaunchPad ; operator NASA }"
        }
    }, {
         "pattern": "nation",
        "predicates": ["Headquarters_of_the_United_Nations"],
        "questions": {
            "404": "In which city are the headquarters of the United Nations?"
        },
        "Sparql": {
            "Sparql_404": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Headquarters_of_the_United_Nations location ?uri . ?uri rdf:type City }"
        }
    }, {
         "pattern": "neil",
        "predicates": ["Neil_Patrick_Harris"],
        "questions": {
            "91": "Give me all the TV shows with Neil Patrick Harris."
        },
        "Sparql": {
            "Sparql_91": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }"
        }
    }, {
         "pattern": "netherlands",
        "predicates": ["Netherlands"],
        "questions": {
            "192": "Who is the king of the Netherlands?"
        },
        "Sparql": {
            "Sparql_192": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Netherlands leader ?uri . ?uri rdf:type Royalty }"
        }
    }, {
         "pattern": "new",
        "predicates": ["New_York_City","New_Jersey"],
        "questions": {
            "5": "Who is the mayor of New York City?",
            "173": "Give me all cities in New Jersey with more than 100000 inhabitants.",
            "393": "What are the five boroughs of New York?",
            "408": "Which museum in New York has the most visitors?"
        },
        "Sparql": {
            "Sparql_5": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { New_York_City leaderName ?uri }",
            "Sparql_173": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type City ; isPartOf New_Jersey ; populationTotal ?inhabitants FILTER ( ?inhabitants > 100000 ) }",
            "Sparql_393": "PREFIX  <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri governmentType <http://dbpedia.org/resource/Borough_(New_York_City)> }",
            "Sparql_408": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Museum ; location New_York_City ; numberOfVisitors ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "nile",
        "predicates": ["Nile"],
        "questions": {
            "205": "In which country does the Nile start?"
        },
        "Sparql": {
            "Sparql_205": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Nile sourceCountry ?uri }"
        }
    }, {
         "pattern": "nobel",
        "predicates": ["Nobel_Prize_in_Literature","Nobel_Peace_Prize",""],
        "questions": {
            "33": "Give me all writers that won the Nobel Prize in literature.",
            "328": "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?"
        },
        "Sparql": {
            "Sparql_33": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "Sparql_328": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri knownFor Manhattan_Project ; rdf:type Scientist ; knownFor Nobel_Peace_Prize }"
        }
    }, {
         "pattern": "north",
        "predicates": ["dbr:North_Rhine-Westphalia"],
        "questions": {
            "278": "how big is the total area of North Rhine- Westphalia?"
        },
        "Sparql": {
            "Sparql_278": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia areaTotal ?tarea }"
        }
    }, {
         "pattern": "oceanographer",
        "predicates": ["Oceanography"],
        "questions": {
            "403": "Give me all Swedish oceanographers."
        },
        "Sparql": {
            "Sparql_403": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri field Oceanography ; birthPlace Sweden }"
        }
    }, {
         "pattern": "operation",
        "predicates": ["Operation_Overlord"],
        "questions": {
            "356": "When did Operation Overlord commence?"
        },
        "Sparql": {
            "Sparql_356": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?d WHERE { Operation_Overlord date ?d }"
        }
    }, {
         "pattern": "oregon",
        "predicates": ["Oregon_wine"],
        "questions": {
            "323": "Which types of grapes grow in Oregon?"
        },
        "Sparql": {
            "Sparql_323": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Oregon_wine growingGrape ?uri }"
        }
    }, {
         "pattern": "organization",
        "predicates": ["Organisation","Company","industry"],
        "questions": {
            "18": "Which organizations were founded in 1950?",
            "42": "Give me all Swiss non-profit organizations.",
            "71": "Give me all Australian nonprofit organizations.",
            "125": "Which software has been developed by organizations founded in California?",
            "142": "Which telecommunications organizations are located in Belgium?",
            "150": "Which organizations were founded in 1930?"
        },
        "Sparql": {
            "Sparql_18": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Organisation { ?uri formationYear ?date } UNION { ?uri foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
            "Sparql_42": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
            "Sparql_71": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/Australia> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Australia> } }",
            "Sparql_125": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Software> . ?company a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/developer> ?company . ?company <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/California> }",
            "Sparql_142": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Telecommunication> } UNION { ?uri <http://dbpedia.org/property/industry> ?industry FILTER regex(?industry, \"Telecommunications\") } { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Belgium> } UNION { ?uri <http://dbpedia.org/property/locationCountry> \"Belgium\"@en } }",
            "Sparql_150": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/formationYear> ?date } UNION { ?uri <http://dbpedia.org/ontology/foundingYear> ?date } FILTER regex(?date, \"^1930\") }"
        }
    }, {
         "pattern": "overlord",
        "predicates": ["Operation_Overlord"],
        "questions": {
            "356": "When did Operation Overlord commence?"
        },
        "Sparql": {
            "Sparql_356": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?d WHERE { Operation_Overlord date ?d }"
        }
    }, {
         "pattern": "oxford",
        "predicates": ["University_of_Oxford"],
        "questions": {
            "49": "What is the official color of the University of Oxford?"
        },
        "Sparql": {
            "Sparql_49": "SELECT DISTINCT ?string WHERE { <http://dbpedia.org/resource/University_of_Oxford> <http://dbpedia.org/ontology/officialSchoolColour> ?string }"
        }
    }, {
         "pattern": "pads",
        "predicates": ["LaunchPad"],
        "questions": {
            "231": "Give me all launch pads operated by NASA."
        },
        "Sparql": {
            "Sparql_231": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type LaunchPad ; operator NASA }"
        }
    }, {
         "pattern": "painter",
        "predicates": ["The_Three_Dancers"],
        "questions": {
            "355": "To which artistic movement did the painter of The Three Dancers belong?"
        },
        "Sparql": {
            "Sparql_355": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { The_Three_Dancers author ?person . ?person movement ?uri }"
        }
    }, {
         "pattern": "pakistan",
        "predicates": ["President_of_Pakistan"],
        "questions": {
            "74": "Who was president of Pakistan in 1978?"
        },
        "Sparql": {
            "Sparql_74": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/President_of_Pakistan> ; <http://dbpedia.org/property/years> 1978 }"
        }
    }, {
         "pattern": "paris",
        "predicates": ["Paris"],
        "questions": {
            "69": "Give me all actors who were born in Paris after 1950.",
            "76": "How many museums does Paris have?",
            "265": "Who is the mayor of Paris?",
            "310": "To which party does the mayor of Paris belong?"
        },
        "Sparql": {
            "Sparql_69": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> . ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Paris> . ?uri <http://dbpedia.org/ontology/birthDate> ?date . FILTER ( ?date >= xsd:dateTime('1950-12-31T00:00:00Z')) }",
            "Sparql_76": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Paris> }",
            "Sparql_265": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Paris mayor ?uri }",
            "Sparql_310": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Paris mayor ?x . ?x party ?uri }"
        }
    }, {
         "pattern": "park",
        "predicates": ["Park_Chan-wook"],
        "questions": {
            "56": "How many movies did Park Chan-wook direct?"
        },
        "Sparql": {
            "Sparql_56": "SELECT COUNT(DISTINCT ?uri AS ?uri) WHERE { ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Park_Chan-wook> . }"
        }
    }, {
         "pattern": "parliament",
        "predicates": ["Palace_of_Westminster"],
        "questions": {
            "215": "What is the location of the Houses of Parliament?"
        },
        "Sparql": {
            "Sparql_215": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT ?uri WHERE { Palace_of_Westminster location ?uri }"
        }
    }, {
         "pattern": "party",
        "predicates": ["PoliticalParty"],
        "questions": {
            "163": "Which Greek parties are pro-European?"
        },
        "Sparql": {
            "Sparql_163": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Greece> ; <http://dbpedia.org/ontology/ideology> <http://dbpedia.org/resource/Pro-Europeanism> }"
        }
    }, {
         "pattern": "peace",
        "predicates": ["War_and_Peace","Nobel_Peace_Prize"],
        "questions": {
            "319": "How many pages does War and Peace have?",
            "328": "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?"
        },
        "Sparql": {
            "Sparql_319": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { War_and_Peace numberOfPages ?n }",
            "Sparql_328": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri knownFor Manhattan_Project ; rdf:type Scientist ; knownFor Nobel_Peace_Prize }"
        }
    }, {
         "pattern": "peanut",
        "predicates": ["Peanut_butter"],
        "questions": {
            "83": "How much carbs does peanut butter have?"
        },
        "Sparql": {
            "Sparql_83": "SELECT DISTINCT ?carbs WHERE { <http://dbpedia.org/resource/Peanut_butter> <http://dbpedia.org/property/carbs> ?carbs }"
        }
    }, {
         "pattern": "pedro",
        "predicates": ["San_Pedro_de_Atacama"],
        "questions": {
            "370": "What is the timezone in San Pedro de Atacama?"
        },
        "Sparql": {
            "Sparql_370": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { San_Pedro_de_Atacama timeZone ?uri }"
        }
    }, {
         "pattern": "penguin",
        "predicates": ["Penguin_Books"],
        "questions": {
            "396": "Who is the founder of Penguin Books?"
        },
        "Sparql": {
            "Sparql_396": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Penguin_Books founder ?uri }"
        }
    }, {
         "pattern": "penn",
        "predicates": ["dbr:Pennsylvania_State_University"],
        "questions": {
            "206": "In which state Penn State University is located?"
        },
        "Sparql": {
            "Sparql_206": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?s WHERE { dbr:Pennsylvania_State_University state ?s }"
        }
    }, {
         "pattern": "people",
        "predicates": ["onto:Person","predciate=populationTotal","predicate=language"],
        "questions": {
            "3": "Which people were born in Heraklion?"
        },
        "Sparql": {
            "Sparql_3": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }"
        }
    }, {
         "pattern": "perl",
        "predicates": ["Perl"],
        "questions": {
            "114": "Which programming languages were influenced by Perl?"
        },
        "Sparql": {
            "Sparql_114": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> { ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Perl> } UNION { <http://dbpedia.org/resource/Perl> <http://dbpedia.org/ontology/influenced> ?uri } }"
        }
    }, {
         "pattern": "persian",
        "predicates": ["dbr:Persian_language"],
        "questions": {
            "344": "Do Urdu and Persian have a common root?"
        },
        "Sparql": {
            "Sparql_344": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Urdu languageFamily ?uri . dbr:Persian_language languageFamily ?uri }"
        }
    }, {
         "pattern": "philippines",
        "predicates": ["Philippines"],
        "questions": {
            "10": "What are the official languages of the Philippines?"
        },
        "Sparql": {
            "Sparql_10": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Philippines officialLanguage ?uri }"
        }
    }, {
         "pattern": "physics",
        "predicates": ["Nobel_Prize_in_Physics"],
        "questions": {
            "326": "Did Tesla win a nobel prize in physics?"
        },
        "Sparql": {
            "Sparql_326": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Nikola_Tesla award Nobel_Prize_in_Physics }"
        }
    }, {
         "pattern": "pigs",
        "predicates": ["Bay_of_Pigs_Invasion"],
        "questions": {
            "198": "Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?"
        },
        "Sparql": {
            "Sparql_198": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Cuban_Missile_Crisis date ?x . Bay_of_Pigs_Invasion date ?y FILTER ( ?x < ?y ) }"
        }
    }, {
         "pattern": "piliers",
        "predicates": ["The_Pillars_of_the_Earth"],
        "questions": {
            "21": "Who wrote the book The pillars of the Earth?",
            "195": "Who wrote the book Les Piliers de la terre?",
            "335": "Who wrote the book The Pillars of the Earth?"
        },
        "Sparql": {
            "Sparql_21": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { The_Pillars_of_the_Earth author ?uri }",
            "Sparql_195": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { The_Pillars_of_the_Earth author ?uri }",
            "Sparql_335": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { The_Pillars_of_the_Earth author ?uri }"
        }
    }, {
         "pattern": "pink",
        "predicates": ["dbr:The_Wall"],
        "questions": {
            "299": "Who are the writers of the Wall album of Pink Floyd?"
        },
        "Sparql": {
            "Sparql_299": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?writers WHERE { dbr:The_Wall dbp:writer ?writers }"
        }
    }, {
         "pattern": "placid",
        "predicates": ["Lake_Placid_(Texas)"],
        "questions": {
            "28": "How deep is Lake Placid?"
        },
        "Sparql": {
            "Sparql_28": "PREFIX  <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> maximumDepth ?n }"
        }
    }, {
         "pattern": "player",
        "predicates": ["Person","DartsPlayer","BasketballPlayer"],
        "questions": {
            "186": "Who is the heaviest player of the Chicago Bulls?",
            "222": "Who is the youngest Darts player?",
            "306": "Who is the tallest basketball player?"
        },
        "Sparql": {
            "Sparql_186": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Person> ; <http://dbpedia.org/ontology/weight> ?num { ?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } UNION { ?uri <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Chicago_Bulls> } } ORDER BY DESC(?num) OFFSET 0 LIMIT 1",
            "Sparql_222": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type DartsPlayer ; birthDate ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1",
            "Sparql_306": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type BasketballPlayer ; height ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "player",
        "predicates": ["Bandleader","BasketballPlayer","SoccerPlayer","ChessPlayer"],
        "questions": {
            "24": "Give me a list of all trumpet players that were bandleaders.",
            "34": "Show me all basketball players that are higher than 2 meters.",
            "53": "Who are the four youngest MVP basketball players?",
            "139": "Which soccer players were born on Malta?",
            "169": "Which Chess players died in the same place they were born in?"
        },
        "Sparql": {
            "Sparql_24": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri occupation Bandleader ; instrument Trumpet }",
            "Sparql_34": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
            "Sparql_53": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/birthDate> ?date ; <http://dbpedia.org/property/highlights> ?h FILTER regex(?h, \"MVP\") } ORDER BY DESC(?date) OFFSET 0 LIMIT 4",
            "Sparql_139": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "Sparql_169": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ChessPlayer> ; <http://dbpedia.org/ontology/birthPlace> ?x ; <http://dbpedia.org/ontology/deathPlace> ?y FILTER ( ?x = ?y ) }"
        }
    }, {
         "pattern": "pluto",
        "predicates": ["dbr:Pluto"],
        "questions": {
            "413": "Who discovered Pluto?"
        },
        "Sparql": {
            "Sparql_413": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:Pluto discoverer ?uri }"
        }
    }, {
         "pattern": "poet",
        "predicates": ["Poet"],
        "questions": {
            "121": "Which poet wrote the most books?"
        },
        "Sparql": {
            "Sparql_121": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Poet> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "poland",
        "predicates": ["Poland"],
        "questions": {
            "225": "How many people live in Poland?"
        },
        "Sparql": {
            "Sparql_225": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Poland populationTotal ?uri }"
        }
    }, {
         "pattern": "politician",
        "predicates": ["Politician"],
        "questions": {
            "118": "Give me all Methodist politicians.",
            "140": "How many politicians graduated from Columbia University?"
        },
        "Sparql": {
            "Sparql_118": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Politician> ; <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Methodism> }",
            "Sparql_140": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Politician> ; <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Columbia_University> }"
        }
    }, {
         "pattern": "polynesia",
        "predicates": ["French_Polynesia"],
        "questions": {
            "285": "Who is the mayor of the capital of French Polynesia?"
        },
        "Sparql": {
            "Sparql_285": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { French_Polynesia capital ?x . ?x mayor ?uri }"
        }
    }, {
         "pattern": "pope",
        "predicates": ["Pope","Pope_John_Paul_II"],
        "questions": {
            "72": "Which pope succeeded John Paul II?",
            "190": "Who was the pope that founded the Vatican Television?"
        },
        "Sparql": {
            "Sparql_72": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_John_Paul_II> <http://dbpedia.org/property/successor> ?uri }",
            "Sparql_190": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type Pope . Vatican_Television_Center foundedBy ?uri }"
        }
    }, {
         "pattern": "premier",
        "predicates": ["Premier_League"],
        "questions": {
            "64": "Give me all soccer clubs in the Premier League."
        },
        "Sparql": {
            "Sparql_64": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Premier_League> }"
        }
    }, {
         "pattern": "president_of, president",
        "predicates": ["President_of_Pakistan", "dbr:8th_President_of_the_United_States", "predicate=dbp:title", "predicate=vicePresident", "predicate=leaderTitle"],
        "questions": {
            "43": "Which presidents were born in 1945?",
            "74": "Who was president of Pakistan in 1978?",
            "229": "Who is 8th president of US?"
        },
        "Sparql": {
            "Sparql_43": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/President> ; <http://dbpedia.org/ontology/birthDate> ?date FILTER regex(?date, \"^1945\") }",

            "Sparql_74": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/President_of_Pakistan> ; <http://dbpedia.org/property/years> 1978 }",
            "Sparql_229": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?name WHERE { dbr:8th_President_of_the_United_States wikiPageRedirects ?link . ?link dbp:name ?name }"
        }
    }, {
         "pattern": "press",
        "predicates": ["Viking_Press"],
        "questions": {
            "378": "Which books by Kerouac were published by Viking Press?"
        },
        "Sparql": {
            "Sparql_378": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Book ; publisher Viking_Press ; author Jack_Kerouac }"
        }
    }, {
         "pattern": "prix",
        "predicates": ["Grand_Prix_(Cannes_Film_Festival)"],
        "questions": {
            "309": "Did Kaurismäki ever win the Grand Prix at Cannes?"
        },
        "Sparql": {
            "Sparql_309": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Aki_Kaurismäki award <http://dbpedia.org/resource/Grand_Prix_(Cannes_Film_Festival)> }"
        }
    }, {
         "pattern": "prize",
        "predicates": ["Nobel_Prize_in_Literature","Nobel_Prize_in_Physics","Nobel_Peace_Prize"],
        "questions": {
            "33": "Give me all writers that won the Nobel Prize in literature.",
            "326": "Did Tesla win a nobel prize in physics?",
            "328": "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?"
        },
        "Sparql": {
            "Sparql_33": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "Sparql_326": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Nikola_Tesla award Nobel_Prize_in_Physics }",
            "Sparql_328": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri knownFor Manhattan_Project ; rdf:type Scientist ; knownFor Nobel_Peace_Prize }"
        }
    }, {
         "pattern": "prodigy",
        "predicates": ["The_Prodigy"],
        "questions": {
            "296": "Give me all members of Prodigy."
        },
        "Sparql": {
            "Sparql_296": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { The_Prodigy bandMember ?uri }"
        }
    }, {
         "pattern": "programming",
        "predicates": ["ProgrammingLanguage"],
        "questions": {
            "114": "Which programming languages were influenced by Perl?",
            "122": "Which programming languages influenced Javascript?",
            "168": "How many programming languages are there?"
        },
        "Sparql": {
            "Sparql_114": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> { ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Perl> } UNION { <http://dbpedia.org/resource/Perl> <http://dbpedia.org/ontology/influenced> ?uri } }",
            "Sparql_122": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> ; <http://dbpedia.org/ontology/influenced> <http://dbpedia.org/resource/JavaScript> }",
            "Sparql_168": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/ProgrammingLanguage> }"
        }
    }, {
         "pattern": "proinsulin",
        "predicates": ["Proinsulin"],
        "questions": {
            "343": "Is proinsulin a protein?"
        },
        "Sparql": {
            "Sparql_343": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { Proinsulin rdf:type Protein }"
        }
    }, {
         "pattern": "project",
        "predicates": ["Manhattan_Project"],
        "questions": {
            "328": "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?"
        },
        "Sparql": {
            "Sparql_328": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri knownFor Manhattan_Project ; rdf:type Scientist ; knownFor Nobel_Peace_Prize }"
        }
    }, {
         "pattern": "protein",
        "predicates": ["Protein"],
        "questions": {
            "343": "Is proinsulin a protein?"
        },
        "Sparql": {
            "Sparql_343": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { Proinsulin rdf:type Protein }"
        }
    }, {
         "pattern": "pulp",
        "predicates": ["Pulp_Fiction"],
        "questions": {
            "342": "How much did Pulp Fiction cost?"
        },
        "Sparql": {
            "Sparql_342": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { Pulp_Fiction budget ?n }"
        }
    }, {
         "pattern": "pyramid",
        "predicates": ["dbr:Great_Pyramid_of_Giza"],
        "questions": {
            "359": "Who was buried in the Great Pyramid of Giza?"
        },
        "Sparql": {
            "Sparql_359": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri restingPlace dbr:Great_Pyramid_of_Giza }"
        }
    }, {
         "pattern": "queen",
        "predicates": ["Queen_(band)"],
        "questions": {
            "409": "What was the first Queen album?",
             "410": "What was the first name of the band Queens of the Stone Age?"
        },
        "Sparql": {
            "Sparql_409": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Album ; artist <http://dbpedia.org/resource/Queen_(band)> ; releaseDate ?d } ORDER BY ASC(?d) OFFSET 0 LIMIT 1",
             "Sparql_410": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?name WHERE { Queens_of_the_Stone_Age alias ?name }"

        }
    }, {
         "pattern": "race",
        "predicates": ["FormulaOneRacer"],
        "questions": {
            "311": "Who is the Formula 1 race driver with the most races?"
        },
        "Sparql": {
            "Sparql_311": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type FormulaOneRacer ; races ?x } ORDER BY DESC(?x) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "ramones",
        "predicates": ["Ramones"],
        "questions": {
            "175": "Give me all B-sides of the Ramones."
        },
        "Sparql": {
            "Sparql_175": "SELECT DISTINCT ?string WHERE { ?x <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Ramones> ; <http://dbpedia.org/ontology/bSide> ?string }"
        }
    }, {
         "pattern": "reaper",
        "predicates": ["dbr:Carolina_Reaper"],
        "questions": {
            "242": "Where is the origin of Carolina reaper?"
        },
        "Sparql": {
            "Sparql_242": "PREFIX  <http://dbpedia.org/ontology/>PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:Carolina_Reaper origin ?uri}"
        }
    }, {
         "pattern": "record",
        "predicates": ["RecordLabel"],
        "questions": {
            "394": "Give me all Canadian Grunge record labels."
        },
        "Sparql": {
            "Sparql_394": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type RecordLabel ; genre Grunge ; country Canada }"
        }
    }, {
         "pattern": "republic",
        "predicates": ["dbr:French_Fifth_Republic","Czech_Republic"],
        "questions": {
            "218": "when was the founding date of french fifth republic?",
            "386": "What is the currency of the Czech Republic?"
        },
        "Sparql": {
            "Sparql_218": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?ff WHERE { dbr:French_Fifth_Republic foundingDate ?ff }",
            "Sparql_386": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Czech_Republic currency ?uri }"
        }
    }, {
         "pattern": "rhine",
        "predicates": ["dbr:North_Rhine-Westphalia"],
        "questions": {
            "278": "how big is the total area of North Rhine- Westphalia?"
        },
        "Sparql": {
            "Sparql_278": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia areaTotal ?tarea }"
        }
    }, {
         "pattern": "river",
        "predicates": ["River", "BodyOfWater"],
        "questions": {
            "57": "Which rivers flow into a German lake?",
            "149": "What is the longest river?",
            "251": "What is the longest river in the world?"
        },
        "Sparql": {
            "Sparql_149": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> { ?uri <http://dbpedia.org/ontology/length> ?l } UNION { ?uri <http://dbpedia.org/property/length> ?l } } ORDER BY DESC(?l) OFFSET 0 LIMIT 1",
            "Sparql_251": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type BodyOfWater ; length ?length } ORDER BY DESC(?length) LIMIT 1",
            "Sparql_57": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> . ?x <http://dbpedia.org/ontology/inflow> ?uri ; a <http://dbpedia.org/ontology/Lake> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> }"
        }
    }, {
         "pattern": "rocket",
        "predicates": ["Rocket"],
        "questions": {
            "167": "Which rockets were launched from Baikonur?"
        },
        "Sparql": {
            "Sparql_167": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Rocket> ; <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Baikonur_Cosmodrome> }"
        }
    }, {
         "pattern": "rolls-royce",
        "predicates": ["Rolls-Royce_Motors"],
        "questions": {
            "75": "Who is the owner of Rolls-Royce?"
        },
        "Sparql": {
            "Sparql_75": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolls-Royce_Motors> <http://dbpedia.org/ontology/owner> ?uri }"
        }
    }, {
         "pattern": "rome",
        "predicates": ["King_of_Rome","Rome"],
        "questions": {
            "178": "List the seven kings of Rome.",
            "297": "In which time zone is Rome?"
        },
        "Sparql": {
            "Sparql_178": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/King_of_Rome> }",
            "Sparql_297": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Rome timeZone ?uri }"
        }
    }, {
         "pattern": "root",
        "predicates": ["languageFamily"],
        "questions": {
            "344": "Do Urdu and Persian have a common root?"
        },
        "Sparql": {
            "Sparql_344": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Urdu languageFamily ?uri . dbr:Persian_language languageFamily ?uri }"
        }
    }, {
         "pattern": "rose",
        "predicates": ["dbr:Wars_of_the_Roses"],
        "questions": {
            "341": "What was the final result of the War of the Roses?"
        },
        "Sparql": {
            "Sparql_341": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?result WHERE { ?uri isPartOfMilitaryConflict dbr:Wars_of_the_Roses ; result ?result ; date ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "rotterdam",
        "predicates": ["Rotterdam"],
        "questions": {
            "300": "Who is the mayor of Rotterdam?"
        },
        "Sparql": {
            "Sparql_300": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Rotterdam leaderName ?uri }"
        }
    }, {
         "pattern": "route",
        "predicates": ["Chile_Route_68"],
        "questions": {
            "366": "In which city does the Chile Route 68 end?"
        },
        "Sparql": {
            "Sparql_366": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Chile_Route_68 routeEnd ?uri }"
        }
    }, {
         "pattern": "russia",
        "predicates": ["Russia"],
        "questions": {
            "382": "What form of government does Russia have?"
        },
        "Sparql": {
            "Sparql_382": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Russia governmentType ?uri }"
        }
    }, {
         "pattern": "san",
        "predicates": ["San_Pedro_de_Atacama"],
        "questions": {
            "370": "What is the timezone in San Pedro de Atacama?"
        },
        "Sparql": {
            "Sparql_370": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { San_Pedro_de_Atacama timeZone ?uri }"
        }
    }, {
         "pattern": "scientist",
        "predicates": ["Scientist"],
        "questions": {
            "328": "Which scientist is known for the Manhattan Project and the Nobel Peace Prize?"
        },
        "Sparql": {
            "Sparql_328": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri knownFor Manhattan_Project ; rdf:type Scientist ; knownFor Nobel_Peace_Prize }"
        }
    }, {
         "pattern": "season",
        "predicates": ["seasonNumber"],
        "questions": {
            "158": "List all episodes of the first season of the HBO television series The Sopranos!",
            "331": "List all episodes of the first season of the HBO television series The Sopranos."
        },
        "Sparql": {
            "Sparql_158": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri series The_Sopranos ; seasonNumber 1 }",
            "Sparql_331": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri series The_Sopranos ; seasonNumber 1 }"
        }
    }, {
         "pattern": "seine",
        "predicates": ["Seine"],
        "questions": {
            "48": "Which bridges cross the Seine?"
        },
        "Sparql": {
            "Sparql_48": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Bridge> ; <http://dbpedia.org/ontology/crosses> <http://dbpedia.org/resource/Seine> }"
        }
    }, {
         "pattern": "series",
        "predicates": ["Battlestar_Galactica_%282004_TV_series%29", "dbr:Friends"],
        "questions": {
            "158": "List all episodes of the first season of the HBO television series The Sopranos!"
        },
        "Sparql": {
            "Sparql_160": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { <http://dbpedia.org/resource/Battlestar_Galactica_%281978_TV_series%29> numberOfEpisodes ?x . <http://dbpedia.org/resource/Battlestar_Galactica_%282004_TV_series%29> numberOfEpisodes ?y FILTER ( ?y > ?x ) }"
        }
    }, {
         "pattern": "shepherd",
        "predicates": ["German_Shepherd"],
        "questions": {
            "185": "Give me all breeds of the German Shepherd dog."
        },
        "Sparql": {
            "Sparql_185": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/breed> <http://dbpedia.org/resource/German_Shepherd> }"
        }
    }, {
         "pattern": "show",
        "predicates": ["TelevisionShow"],
        "questions": {
            "137": "Which television shows were created by John Cleese?",
            "321": "Which television shows were created by Walt Disney?"
        },
        "Sparql": {
            "Sparql_137": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Cleese> }",
            "Sparql_321": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type TelevisionShow ; creator Walt_Disney }"
        }
    }, {
         "pattern": "site",
        "predicates": ["WorldHeritageSite"],
        "questions": {
            "68": "Give me all world heritage sites designated within the past two years."
        },
        "Sparql": {
            "Sparql_68": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WorldHeritageSite> . { ?uri <http://dbpedia.org/property/year> '2013'^^xsd:integer . } UNION { ?uri <http://dbpedia.org/property/year> '2014'^^xsd:integer . } }"
        }
    }, {
         "pattern": "skyteam",
        "predicates": ["SkyTeam"],
        "questions": {
            "116": "What airlines are part of the SkyTeam alliance?"
        },
        "Sparql": {
            "Sparql_116": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Airline> { ?uri <http://dbpedia.org/ontology/alliance> <http://dbpedia.org/resource/SkyTeam> } UNION { ?uri <http://dbpedia.org/ontology/Alliance> <http://dbpedia.org/resource/SkyTeam> } }"
        }
    }, {
         "pattern": "slack",
        "predicates": ["Slack_(software)"],
        "questions": {
            "241": "Who developed Slack?"
        },
        "Sparql": {
            "Sparql_241": "PREFIX  <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri product <http://dbpedia.org/resource/Slack_(software)> }"
        }
    }, {
         "pattern": "slovenia",
        "predicates": ["Slovenia"],
        "questions": {
            "316": "How many ethnic groups live in Slovenia?"
        },
        "Sparql": {
            "Sparql_316": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { Slovenia ethnicGroup ?uri }"
        }
    }, {
         "pattern": "soccer,",
        "predicates": ["SoccerClub","SoccerPlayer"],
        "questions": {
            "46": "Show a list of soccer clubs that play in the Bundesliga.",
            "64": "Give me all soccer clubs in the Premier League.",
            "139": "Which soccer players were born on Malta?",
            "183": "Give me all soccer clubs in Spain."
        },
        "Sparql": {
            "Sparql_46": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Bundesliga> }",
            "Sparql_64": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Premier_League> }",
            "Sparql_139": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerPlayer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Malta> }",
            "Sparql_183": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> { ?uri <http://dbpedia.org/ontology/ground> <http://dbpedia.org/resource/Spain> } UNION { ?uri <http://dbpedia.org/property/ground> ?ground FILTER regex(?ground, \"Spain\") } }"
        }
    }, {
         "pattern": "software",
        "predicates": ["Software","Mean_Hamster_Software"],
        "questions": {
            "125": "Which software has been developed by organizations founded in California?",
            "295": "Give me all video games published by Mean Hamster Software."
        },
        "Sparql": {
            "Sparql_125": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Software> . ?company a <http://dbpedia.org/ontology/Company> . ?uri <http://dbpedia.org/ontology/developer> ?company . ?company <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/California> }",
            "Sparql_295": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type VideoGame ; publisher Mean_Hamster_Software }"
        }
    }, {
         "pattern": "song",
        "predicates": ["Song"],
        "questions": {
            "136": "Show me all songs from Bruce Springsteen released between 1980 and 1990."
        },
        "Sparql": {
            "Sparql_136": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song> . ?uri <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Bruce_Springsteen> . ?uri <http://dbpedia.org/ontology/releaseDate> ?date . FILTER (?date >= '1980-01-01'^^xsd:date && ?date <= '1990-12-31'^^xsd:date) }"
        }
    }, {
         "pattern": "sopranos",
        "predicates": ["The_Sopranos"],
        "questions": {
            "158": "List all episodes of the first season of the HBO television series The Sopranos!",
            "331": "List all episodes of the first season of the HBO television series The Sopranos."
        },
        "Sparql": {
            "Sparql_158": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri series The_Sopranos ; seasonNumber 1 }",
            "Sparql_331": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri series The_Sopranos ; seasonNumber 1 }"
        }
    }, {
         "pattern": "south",
        "predicates": ["dbr:South_Africa"],
        "questions": {
            "303": "What form of government is found in South Africa?"
        },
        "Sparql": {
            "Sparql_303": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { dbr:South_Africa governmentType ?uri }"
        }
    }, {
         "pattern": "spain",
        "predicates": ["Spain"],
        "questions": {
            "132": "Where is the residence of the prime minister of Spain?",
            "183": "Give me all soccer clubs in Spain.",
            "207": "What is the biggest stadium in Spain?"
        },
        "Sparql": {
            "Sparql_132": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Prime_Minister_of_Spain> <http://dbpedia.org/property/residence> ?uri }",
            "Sparql_183": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/SoccerClub> { ?uri <http://dbpedia.org/ontology/ground> <http://dbpedia.org/resource/Spain> } UNION { ?uri <http://dbpedia.org/property/ground> ?ground FILTER regex(?ground, \"Spain\") } }",
            "Sparql_207": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Stadium ; location Spain ; seatingCapacity ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "specials",
        "predicates": ["BBC_Wildlife_Specials"],
        "questions": {
            "352": "Who is the host of the BBC Wildlife Specials?"
        },
        "Sparql": {
            "Sparql_352": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { BBC_Wildlife_Specials presenter ?uri }"
        }
    }, {
         "pattern": "sport",
        "predicates": ["Sport"],
        "questions": {
            "223": "Is horse racing a sport?"
        },
        "Sparql": {
            "Sparql_223": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { dbr:Horse_racing rdf:type Sport }"
        }
    }, {
         "pattern": "stadium",
        "predicates": ["Stadium"],
        "questions": {
            "207": "What is the biggest stadium in Spain?"
        },
        "Sparql": {
            "Sparql_207": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Stadium ; location Spain ; seatingCapacity ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "state",
        "predicates": ["United_States", "yago:WikicatStatesOfTheUnitedStates", "dbr:Pennsylvania_State_University", "Washington_(state)", "dbr:States_of_Mexico"],
        "questions": {
            "4": "In which U.S. state is Area 51 located?",
            "16": "Which state of the USA has the highest population density?",
            "22": "Which state of the United States of America has the highest density?",
            "25": "Which U.S. states are in the same timezone as Utah?",
            "26": "Which U.S. states possess gold minerals?",
            "98": "What is the largest metropolitan area in Washington state?",
            "115": "In which U.S. state is Mount McKinley located?",
            "108": "Which U.S. states are in the same time zone as Utah?",
            "172": "In which U.S. state is Fort Knox located?",
            "206": "In which state Penn State University is located?",
            "318": "Was Natalie Portman born in the United States?",
            "327": "How many states are in Mexico?"
        },
        "Sparql": {
            "Sparql_4": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { Area_51 location ?uri . ?uri country United_States. }",
            "Sparql_16": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
            "Sparql_22": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
            "Sparql_25": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX  <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != Utah ) }",
            "Sparql_26": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
            "Sparql_98": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Washington_(state)> <http://dbpedia.org/property/largestmetro> ?uri }",
            "Sparql_108": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Utah> <http://dbpedia.org/property/timezone> ?x . ?uri a <http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates> ; <http://dbpedia.org/property/timezone> ?x FILTER ( ?uri != <http://dbpedia.org/resource/Utah> ) }",
            "Sparql_115": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_McKinley> wikiPageRedirects ?x . ?x <http://dbpedia.org/ontology/locatedInArea> ?uri. ?uri rdf:type yago:WikicatStatesOfTheUnitedStates }",
            "Sparql_172": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { Fort_Knox location ?uri . ?uri country United_States }",
            "Sparql_206": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?s WHERE { dbr:Pennsylvania_State_University state ?s }",
            "Sparql_318": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Natalie_Portman birthPlace ?city . ?city country United_States }",
            "Sparql_327": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT (COUNT(?uri) AS ?count) WHERE { ?uri type dbr:States_of_Mexico }"
        }
    }, {
         "pattern": "statue",
        "predicates": ["Statue_of_Liberty"],
        "questions": {
            "35": "When was the Statue of Liberty built?"
        },
        "Sparql": {
            "Sparql_35": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }"
        }
    }, {
         "pattern": "steel",
        "predicates": ["Danielle_Steel"],
        "questions": {
            "109": "Give me all books written by Danielle Steel."
        },
        "Sparql": {
            "Sparql_109": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Book> ; <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Danielle_Steel> }"
        }
    }, {
         "pattern": "stone",
        "predicates": ["Queens_of_the_Stone_Age"],
        "questions": {
            "410": "What was the first name of the band Queens of the Stone Age?"
        },
        "Sparql": {
            "Sparql_410": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?name WHERE { Queens_of_the_Stone_Age alias ?name }"
        }
    }, {
         "pattern": "store",
        "predicates": ["Aldi"],
        "questions": {
            "250": "How many Aldi stores are there?"
        },
        "Sparql": {
            "Sparql_250": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?number WHERE { Aldi numberOfLocations ?number }"
        }
    }, {
         "pattern": "story",
        "predicates": ["Toy_Story"],
        "questions": {
            "260": "Give me the runtime of Toy Story."
        },
        "Sparql": {
            "Sparql_260": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { Toy_Story runtime ?runtime }"
        }
    }, {
         "pattern": "studios",
        "predicates": ["Universal_Studios"],
        "questions": {
            "15": "Who is the owner of Universal Studios?"
        },
        "Sparql": {
            "Sparql_15": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Universal_Studios owner ?uri }"
        }
    }, {
         "pattern": "sungkyunkwan",
        "predicates": ["dbr:Sungkyunkwan_University"],
        "questions": {
            "237": "Where is Sungkyunkwan University?"
        },
        "Sparql": {
            "Sparql_237": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?country WHERE { dbr:Sungkyunkwan_University city ?city ; country ?country }"
        }
    }, {
         "pattern": "suriname",
        "predicates": ["Suriname"],
        "questions": {
            "291": "What is the official language of Suriname?"
        },
        "Sparql": {
            "Sparql_291": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Suriname officialLanguage ?uri }"
        }
    }, {
         "pattern": "swimmer",
        "predicates": ["Swimmer"],
        "questions": {
            "40": "Give all swimmers that were born in Moscow."
        },
        "Sparql": {
            "Sparql_40": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }"
        }
    }, {
         "pattern": "tegel",
        "predicates": ["Berlin_Tegel_Airport "],
        "questions": {
            "373": "Which subsidiary of Lufthansa serves both Dortmund and Berlin Tegel?"
        },
        "Sparql": {
            "Sparql_373": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Lufthansa subsidiary ?uri . ?uri targetAirport Dortmund_Airport ; targetAirport Berlin_Tegel_Airport }"
        }
    }, {
         "pattern": "tel",
        "predicates": ["Tel_Aviv"],
        "questions": {
            "381": "Who is the mayor of Tel Aviv?"
        },
        "Sparql": {
            "Sparql_381": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Tel_Aviv leaderName ?uri }"
        }
    }, {
         "pattern": "telecommunication",
        "predicates": ["Telecommunication"],
        "questions": {
            "142": "Which telecommunications organizations are located in Belgium?"
        },
        "Sparql": {
            "Sparql_142": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Organisation> { ?uri <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Telecommunication> } UNION { ?uri <http://dbpedia.org/property/industry> ?industry FILTER regex(?industry, \"Telecommunications\") } { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Belgium> } UNION { ?uri <http://dbpedia.org/property/locationCountry> \"Belgium\"@en } }"
        }
    }, {
         "pattern": "television_show, television_series",
        "predicates": ["TelevisionShow","predicate=TelevisionShow","predicate=series"],
        "questions": {
            "321": "Which television shows were created by Walt Disney?"
        },
        "Sparql": {
            "Sparql_321": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type TelevisionShow ; creator Walt_Disney }"
        }
    }, {
         "pattern": "terre",
        "predicates": ["The_Pillars_of_the_Earth"],
        "questions": {
            "195": "Who wrote the book Les Piliers de la terre?"
        },
        "Sparql": {
            "Sparql_195": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { The_Pillars_of_the_Earth author ?uri }"
        }
    }, {
         "pattern": "thrones",
        "predicates": ["Game_of_Thrones"],
        "questions": {
            "338": "Does Breaking Bad have more episodes than Game of Thrones?",
            "397": "Who wrote the Game of Thrones theme?"
        },
        "Sparql": {
            "Sparql_338": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Breaking_Bad numberOfEpisodes ?x . Game_of_Thrones numberOfEpisodes ?y FILTER ( ?y > ?x ) }",
            "Sparql_397": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Game_of_Thrones composer ?uri }"
        }
    }, {
         "pattern": "titanic",
        "predicates": ["Titanic_(1997_film)","RMS_Titanic"],
        "questions": {
            "259": "Who composed the soundtrack for Cameron's Titanic?",
            "325": "When was the Titanic completed?"
        },
        "Sparql": {
            "Sparql_259": "PREFIX  <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Titanic_(1997_film)> musicComposer ?uri }",
            "Sparql_325": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { RMS_Titanic completionDate ?date }"
        }
    }, {
         "pattern": "tower",
        "predicates": ["Eiffel_Tower","Yokohama_Marine_Tower"],
        "questions": {
            "67": "Where did the architect of the Eiffel Tower study?",
            "304": "How high is the Yokohama Marine Tower?"
        },
        "Sparql": {
            "Sparql_67": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eiffel_Tower> <http://dbpedia.org/ontology/architect> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri }",
            "Sparql_304": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { Yokohama_Marine_Tower height ?num }"
        }
    }, {
         "pattern": "toy",
        "predicates": ["Toy_Story"],
        "questions": {
            "260": "Give me the runtime of Toy Story."
        },
        "Sparql": {
            "Sparql_260": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?runtime WHERE { Toy_Story runtime ?runtime }"
        }
    }, {
         "pattern": "trumpet",
        "predicates": ["Trumpet"],
        "questions": {
            "24": "Give me a list of all trumpet players that were bandleaders.",
            "164": "Give me a list of all bandleaders that play trumpet."
        },
        "Sparql": {
            "Sparql_24": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri occupation Bandleader ; instrument Trumpet }",
            "Sparql_164": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Bandleader> ; <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Trumpet> }"
        }
    }, {
         "pattern": "turkmenistan",
        "predicates": ["Turkmenistan"],
        "questions": {
            "307": "How many languages are spoken in Turkmenistan?"
        },
        "Sparql": {
            "Sparql_307": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT (COUNT(DISTINCT ?x) AS ?c) WHERE { Turkmenistan language ?x }"
        }
    }, {
         "pattern": "tv",
        "predicates": ["TelevisionShow"],
        "questions": {
            "91": "Give me all the TV shows with Neil Patrick Harris.",
            "226": "When was the last episode of the TV series Friends aired?"
        },
        "Sparql": {
            "Sparql_91": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/TelevisionShow> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Neil_Patrick_Harris> }",
            "Sparql_226": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?date WHERE { dbr:Friends completionDate ?date }"
        }
    }, {
         "pattern": "u.s.",
        "predicates": ["object=United_States","object=yago:WikicatStatesOfTheUnitedStates"],
        "questions": {
            "4": "In which U.S. state is Area 51 located?",
            "25": "Which U.S. states are in the same timezone as Utah?",
            "26": "Which U.S. states possess gold minerals?",
            "108": "Which U.S. states are in the same time zone as Utah?",
            "115": "In which U.S. state is Mount McKinley located?",
            "172": "In which U.S. state is Fort Knox located?",
            "254": "Who was the wife of U.S. president Lincoln?",
            "324": "Was U.S. president Jackson involved in a war?"
        },
        "Sparql": {
            "Sparql_4": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { Area_51 location ?uri . ?uri country United_States. }",
            "Sparql_25": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX  <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != Utah ) }",
            "Sparql_26": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
            "Sparql_108": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Utah> <http://dbpedia.org/property/timezone> ?x . ?uri a <http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates> ; <http://dbpedia.org/property/timezone> ?x FILTER ( ?uri != <http://dbpedia.org/resource/Utah> ) }",
            "Sparql_115": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_McKinley> wikiPageRedirects ?x . ?x <http://dbpedia.org/ontology/locatedInArea> ?uri. ?uri rdf:type yago:WikicatStatesOfTheUnitedStates }",
            "Sparql_172": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { Fort_Knox location ?uri . ?uri country United_States }",
            "Sparql_254": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Abraham_Lincoln spouse ?uri }",
            "Sparql_324": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Andrew_Jackson battle ?battle }"
        }
    }, {
         "pattern": "uk",
        "predicates": ["United_Kingdom"],
        "questions": {
            "209": "How large is the area of UK?",
            "364": "In which UK city are the headquarters of the MI6?"
        },
        "Sparql": {
            "Sparql_209": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?area WHERE { dbr:United_Kingdom areaTotal ?area }",
            "Sparql_364": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Secret_Intelligence_Service headquarter ?uri . ?uri country United_Kingdom }"
        }
    }, {
         "pattern": "unc",
        "predicates": ["resource/UNC_Health_Care"],
        "questions": {
            "176": "What are the specialities of the UNC Health Care?"
        },
        "Sparql": {
            "Sparql_176": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/UNC_Health_Care> <http://dbpedia.org/property/speciality> ?uri }"
        }
    }, {
         "pattern": "union",
        "predicates": ["dbr:European_Union"],
        "questions": {
            "230": "how much is the total population of  european union?"
        },
        "Sparql": {
            "Sparql_230": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?europop WHERE { dbr:European_Union populationTotal ?europop }"
        }
    }, {
         "pattern": "united",
        "predicates": ["United_States","Headquarters_of_the_United_Nations"],
        "questions": {
            "22": "Which state of the United States of America has the highest density?",
            "318": "Was Natalie Portman born in the United States?",
            "404": "In which city are the headquarters of the United Nations?"
        },
        "Sparql": {
            "Sparql_22": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
            "Sparql_318": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Natalie_Portman birthPlace ?city . ?city country United_States }",
            "Sparql_404": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Headquarters_of_the_United_Nations location ?uri . ?uri rdf:type City }"
        }
    }, {
         "pattern": "universal",
        "predicates": ["Universal_Studios"],
        "questions": {
            "15": "Who is the owner of Universal Studios?"
        },
        "Sparql": {
            "Sparql_15": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Universal_Studios owner ?uri }"
        }
    }, {
         "pattern": "university,",
        "predicates": ["University","University_of_Oxford","Columbia_University"],
        "questions": {
            "49": "What is the official color of the University of Oxford?",
            "140": "How many politicians graduated from Columbia University?",
            "206": "In which state Penn State University is located?",
            "237": "Where is Sungkyunkwan University?",
            "248": "Which university did Angela Merkel attend?",
            "266": "Did Arnold Schwarzenegger attend a university?"
        },
        "Sparql": {
            "Sparql_49": "SELECT DISTINCT ?string WHERE { <http://dbpedia.org/resource/University_of_Oxford> <http://dbpedia.org/ontology/officialSchoolColour> ?string }",
            "Sparql_140": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Politician> ; <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Columbia_University> }",
            "Sparql_206": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?s WHERE { dbr:Pennsylvania_State_University state ?s }",
            "Sparql_237": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?country WHERE { dbr:Sungkyunkwan_University city ?city ; country ?country }",
            "Sparql_248": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?university WHERE { Angela_Merkel almaMater ?university }",
            "Sparql_266": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { Arnold_Schwarzenegger almaMater ?x . ?x rdf:type University }"
        }
    }, {
         "pattern": "urals",
        "predicates": ["Ural_Mountains"],
        "questions": {
            "65": "What is the highest place of the Urals?"
        },
        "Sparql": {
            "Sparql_65": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ural_Mountains> <http://dbpedia.org/property/highest> ?uri }"
        }
    }, {
         "pattern": "us",
        "predicates": ["dbr:8th_President_of_the_United_States"],
        "questions": {
            "229": "Who is 8th president of US?"
        },
        "Sparql": {
            "Sparql_229": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?name WHERE { dbr:8th_President_of_the_United_States wikiPageRedirects ?link . ?link dbp:name ?name }"
        }
    }, {
         "pattern": "usa",
        "predicates": ["yago:WikicatStatesOfTheUnitedStates"],
        "questions": {
            "16": "Which state of the USA has the highest population density?"
        },
        "Sparql": {
            "Sparql_16": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1"
        }
    }, {
         "pattern": "utah",
        "predicates": ["Utah"],
        "questions": {
            "25": "Which U.S. states are in the same timezone as Utah?",
            "108": "Which U.S. states are in the same time zone as Utah?"
        },
        "Sparql": {
            "Sparql_25": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX  <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != Utah ) }",
            "Sparql_108": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Utah> <http://dbpedia.org/property/timezone> ?x . ?uri a <http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates> ; <http://dbpedia.org/property/timezone> ?x FILTER ( ?uri != <http://dbpedia.org/resource/Utah> ) }"
        }
    }, {
         "pattern": "uzi",
        "predicates": ["Uzi"],
        "questions": {
            "14": "Which other weapons did the designer of the Uzi develop?"
        },
        "Sparql": {
            "Sparql_14": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Weapon ; dbp:designer ?x . Uzi dbp:designer ?x FILTER ( ?uri != Uzi ) }"
        }
    }, {
         "pattern": "vatican",
        "predicates": ["Vatican_Television_Center"],
        "questions": {
            "190": "Who was the pope that founded the Vatican Television?"
        },
        "Sparql": {
            "Sparql_190": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type Pope . Vatican_Television_Center foundedBy ?uri }"
        }
    }, {
         "pattern": "velvet",
        "predicates": ["Velvet_Goldmine"],
        "questions": {
            "314": "Is Christian Bale starring in Velvet Goldmine?"
        },
        "Sparql": {
            "Sparql_314": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Velvet_Goldmine starring Christian_Bale }"
        }
    }, {
         "pattern": "video,",
        "predicates": ["VideoGame","Category:Action_role-playing_video_games"],
        "questions": {
            "32": "What are the top-10 action role-playing video games according to IGN?",
            "232": "Who developed the video game World of Warcraft?",
            "295": "Give me all video games published by Mean Hamster Software.",
            "358": "Is there a video game called Battle Chess?"
        },
        "Sparql": {
            "Sparql_32": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
            "Sparql_232": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { World_of_Warcraft developer ?uri }",
            "Sparql_295": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type VideoGame ; publisher Mean_Hamster_Software }",
            "Sparql_358": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { ?uri rdf:type VideoGame ; rdfs:label \"Battle Chess\"@en }"
        }
    }, {
         "pattern": "vienna",
        "predicates": ["resource/Vienna"],
        "questions": {
            "179": "Give me all people that were born in Vienna and died in Berlin."
        },
        "Sparql": {
            "Sparql_179": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vienna> ; <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berlin> }"
        }
    }, {
         "pattern": "volcanos",
        "predicates": ["Volcano"],
        "questions": {
            "47": "Which volcanos in Japan erupted since 2000?"
        },
        "Sparql": {
            "Sparql_47": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Japan> ; <http://dbpedia.org/ontology/eruptionYear> ?date FILTER ( year(?date) >= 2000 ) }"
        }
    }, {
         "pattern": "wall",
        "predicates": ["dbr:The_Wall"],
        "questions": {
            "299": "Who are the writers of the Wall album of Pink Floyd?"
        },
        "Sparql": {
            "Sparql_299": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?writers WHERE { dbr:The_Wall dbp:writer ?writers }"
        }
    }, {
         "pattern": "war",
        "predicates": ["War_and_Peace","dbr:Wars_of_the_Roses"],
        "questions": {
            "319": "How many pages does War and Peace have?",
            "324": "Was U.S. president Jackson involved in a war?",
            "341": "What was the final result of the War of the Roses?"
        },
        "Sparql": {
            "Sparql_319": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?n WHERE { War_and_Peace numberOfPages ?n }",
            "Sparql_324": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> ASK WHERE { Andrew_Jackson battle ?battle }",
            "Sparql_341": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?result WHERE { ?uri isPartOfMilitaryConflict dbr:Wars_of_the_Roses ; result ?result ; date ?date } ORDER BY DESC(?date) OFFSET 0 LIMIT 1"
        }
    }, {
         "pattern": "warcraft",
        "predicates": ["World_of_Warcraft"],
        "questions": {
            "232": "Who developed the video game World of Warcraft?"
        },
        "Sparql": {
            "Sparql_232": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { World_of_Warcraft developer ?uri }"
        }
    }, {
         "pattern": "washington",
        "predicates": ["resource/Washington_(state)"],
        "questions": {
            "98": "What is the largest metropolitan area in Washington state?"
        },
        "Sparql": {
            "Sparql_98": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Washington_(state)> <http://dbpedia.org/property/largestmetro> ?uri }"
        }
    }, {
         "pattern": "weapon",
        "predicates": ["Weapon"],
        "questions": {
            "14": "Which other weapons did the designer of the Uzi develop?",
            "153": "Which weapons did Heckler & Koch develop?"
        },
        "Sparql": {
            "Sparql_14": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Weapon ; dbp:designer ?x . Uzi dbp:designer ?x FILTER ( ?uri != Uzi ) }",
            "Sparql_153": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Weapon> ; <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Heckler_&_Koch> }"
        }
    }, {
         "pattern": "weser",
        "predicates": ["Weser"],
        "questions": {
            "246": "Which cities does the Weser flow through?"
        },
        "Sparql": {
            "Sparql_246": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Weser city ?uri }"
        }
    }, {
         "pattern": "west",
        "predicates": ["West_African_CFA_franc"],
        "questions": {
            "147": "In which countries can you pay using the West African CFA franc?"
        },
        "Sparql": {
            "Sparql_147": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/West_African_CFA_franc> }"
        }
    }, {
         "pattern": "westphalia",
        "predicates": ["dbr:North_Rhine-Westphalia"],
        "questions": {
            "278": "how big is the total area of North Rhine- Westphalia?"
        },
        "Sparql": {
            "Sparql_278": "PREFIX  <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?tarea WHERE { dbr:North_Rhine-Westphalia areaTotal ?tarea }"
        }
    }, {
         "pattern": "wikipedia",
        "predicates": ["Wikipedia"],
        "questions": {
            "200": "Who created Wikipedia?"
        },
        "Sparql": {
            "Sparql_200": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Wikipedia author ?uri }"
        }
    }, {
         "pattern": "wildlife_specials",
        "predicates": ["BBC_Wildlife_Specials"],
        "questions": {
            "352": "Who is the host of the BBC Wildlife Specials?"
        },
        "Sparql": {
            "Sparql_352": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { BBC_Wildlife_Specials presenter ?uri }"
        }
    }, {
         "pattern": "wine",
        "predicates": ["Sparkling_wine"],
        "questions": {
            "387": "Where in France is sparkling wine produced?"
        },
        "Sparql": {
            "Sparql_387": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri wineProduced Sparkling_wine ; location France }"
        }
    }, {
         "pattern": "world",
        "predicates": ["WorldHeritageSite","World_of_Warcraft","dbr:2018_FIFA_World_Cup"],
        "questions": {
            "68": "Give me all world heritage sites designated within the past two years.",
            "105": "What was Brazil's lowest rank in the FIFA World Ranking?",
            "148": "Which holidays are celebrated around the world?",
            "188": "What is the largest country in the world?",
            "232": "Who developed the video game World of Warcraft?",
            "251": "What is the longest river in the world?",
            "281": "When will start the final match of the football world cup 2018?",
            "305": "Which holidays are celebrated around the world? test2"
        },
        "Sparql": {
            "Sparql_68": "SELECT DISTINCT ?uri WHERE { ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WorldHeritageSite> . { ?uri <http://dbpedia.org/property/year> '2013'^^xsd:integer . } UNION { ?uri <http://dbpedia.org/property/year> '2014'^^xsd:integer . } }",
            "Sparql_105": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Brazil_national_football_team> <http://dbpedia.org/property/fifaMin> ?n }",
            "Sparql_148": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Holiday }",
            "Sparql_188": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Country ; areaTotal ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
            "Sparql_232": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { World_of_Warcraft developer ?uri }",
            "Sparql_251": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type BodyOfWater ; length ?length } ORDER BY DESC(?length) LIMIT 1",
            "Sparql_281": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?Date WHERE { dbr:2018_FIFA_World_Cup dbp:date ?Date } ORDER BY DESC(?Date) LIMIT 1",
            "Sparql_305": "PREFIX  <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Holiday }"
        }
    }, {
         "pattern": "writer",
        "predicates": ["Writer","predicate=dbp:writer"],
        "questions": {
            "33": "Give me all writers that won the Nobel Prize in literature.",
            "100": "Which writers studied in Istanbul?"
        },
        "Sparql": {
            "Sparql_33": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
            "Sparql_100": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> { ?uri <http://dbpedia.org/ontology/almaMater> ?x } UNION { ?uri <http://dbpedia.org/ontology/education> ?x } { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Istanbul> } UNION { ?x <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Istanbul> } }"
        }
    }, {
         "pattern": "wyoming",
        "predicates": ["Wyoming"],
        "questions": {
            "66": "Who is the governor of Wyoming?"
        },
        "Sparql": {
            "Sparql_66": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wyoming> <http://dbpedia.org/property/governor> ?uri }"
        }
    }, {
         "pattern": "yeti",
        "predicates": ["Yeti_Airlines"],
        "questions": {
            "196": "Which airports does Yeti Airlines serve?"
        },
        "Sparql": {
            "Sparql_196": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { Yeti_Airlines targetAirport ?uri }"
        }
    }, {
         "pattern": "yokohama",
        "predicates": ["Yokohama_Marine_Tower"],
        "questions": {
            "304": "How high is the Yokohama Marine Tower?"
        },
        "Sparql": {
            "Sparql_304": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { Yokohama_Marine_Tower height ?num }"
        }
    }, {
         "pattern": "york",
        "predicates": ["New_York_City","Borough_(New_York_City)"],
        "questions": {
            "5": "Who is the mayor of New York City?",
            "393": "What are the five boroughs of New York?",
            "408": "Which museum in New York has the most visitors?"
        },
        "Sparql": {
            "Sparql_5": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { New_York_City leaderName ?uri }",
            "Sparql_393": "PREFIX  <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri governmentType <http://dbpedia.org/resource/Borough_(New_York_City)> }",
            "Sparql_408": "PREFIX  <http://dbpedia.org/ontology/> PREFIX  <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type Museum ; location New_York_City ; numberOfVisitors ?num } ORDER BY DESC(?num) OFFSET 0 LIMIT 1"
        }
    }]
